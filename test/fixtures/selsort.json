{
  "options": {
    "directed": true,
    "multigraph": true,
    "compound": true
  },
  "nodes": [
    {
      "v": "stdout_35",
      "value": {
        "id": "io/stdout",
        "version": "0.3.0",
        "inputPorts": {
          "input": "string"
        },
        "outputPorts": {},
        "settings": {
          "sideEffects": true,
          "argumentOrdering": [
            "input"
          ]
        },
        "atomic": true,
        "isSink": true,
        "path": [],
        "branchPath": "stdout_35",
        "branch": "stdout_35",
        "name": "stdout_35",
        "recursive": false,
        "typeHint": {}
      }
    },
    {
      "v": "array_to_string_36",
      "value": {
        "id": "translator/array_to_string",
        "version": "0.2.1",
        "inputPorts": {
          "input": "[int64]"
        },
        "outputPorts": {
          "output": "string"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "input",
            "output"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [],
        "branchPath": "array_to_string_36",
        "branch": "array_to_string_36",
        "name": "array_to_string_36",
        "recursive": false,
        "typeHint": {}
      }
    },
    {
      "v": "selectionsort_37",
      "value": {
        "id": "selectionsort",
        "inputPorts": {
          "list": "[int64]"
        },
        "outputPorts": {
          "value": "[int64]"
        },
        "settings": {
          "argumentOrdering": [
            "list",
            "value"
          ],
          "genericType": {
            "list": "[int64]",
            "value": "[int64]"
          },
          "isGeneric": true
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/if",
              "version": "0.2.0",
              "inputPorts": {
                "check": "bool",
                "truePath": "generic",
                "falsePath": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "implementation": {
                "nodes": [
                  {
                    "id": "logic/mux",
                    "inputPorts": {
                      "input1": "generic",
                      "input2": "generic",
                      "control": "bool"
                    },
                    "outputPorts": {
                      "output": "generic"
                    },
                    "atomic": true,
                    "version": "0.3.0",
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "input1",
                        "input2",
                        "control",
                        "output"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "logic/if",
                        "branch": "if_25",
                        "version": "0.2.0",
                        "branchPath": "selectionsort_37:if_25"
                      }
                    ],
                    "parent": "selectionsort_37:if_25",
                    "branchPath": "selectionsort_37:if_25:mux_0",
                    "branch": "mux_0",
                    "recursive": false
                  }
                ],
                "edges": [
                  {
                    "from": "truePath",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "falsePath",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "check",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "value"
                  }
                ]
              },
              "settings": {
                "argumentOrdering": [
                  "check",
                  "truePath",
                  "falsePath",
                  "value"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                }
              ],
              "parent": "selectionsort_37",
              "branchPath": "selectionsort_37:if_25",
              "branch": "if_25",
              "recursive": false
            },
            {
              "id": "array/empty",
              "version": "0.2.0",
              "inputPorts": {
                "array": "generic"
              },
              "outputPorts": {
                "isEmpty": "bool"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "isEmpty"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                }
              ],
              "parent": "selectionsort_37",
              "branchPath": "selectionsort_37:empty_26",
              "branch": "empty_26",
              "recursive": false
            },
            {
              "id": "min",
              "inputPorts": {
                "list": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "settings": {
                "argumentOrdering": [
                  "list",
                  "value"
                ]
              },
              "implementation": {
                "nodes": [
                  {
                    "id": "logic/if",
                    "version": "0.2.0",
                    "inputPorts": {
                      "check": "bool",
                      "truePath": "generic",
                      "falsePath": "generic"
                    },
                    "outputPorts": {
                      "value": "generic"
                    },
                    "implementation": {
                      "nodes": [
                        {
                          "id": "logic/mux",
                          "inputPorts": {
                            "input1": "generic",
                            "input2": "generic",
                            "control": "bool"
                          },
                          "outputPorts": {
                            "output": "generic"
                          },
                          "atomic": true,
                          "version": "0.3.0",
                          "specialForm": true,
                          "settings": {
                            "argumentOrdering": [
                              "input1",
                              "input2",
                              "control",
                              "output"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "min",
                              "branch": "min_27",
                              "branchPath": "selectionsort_37:min_27"
                            },
                            {
                              "meta": "logic/if",
                              "branch": "if_14",
                              "version": "0.2.0",
                              "branchPath": "selectionsort_37:min_27:if_14"
                            }
                          ],
                          "parent": "selectionsort_37:min_27:if_14",
                          "branchPath": "selectionsort_37:min_27:if_14:mux_0",
                          "branch": "mux_0",
                          "recursive": false
                        }
                      ],
                      "edges": [
                        {
                          "from": "truePath",
                          "to": "mux_0:input1"
                        },
                        {
                          "from": "falsePath",
                          "to": "mux_0:input2"
                        },
                        {
                          "from": "check",
                          "to": "mux_0:control"
                        },
                        {
                          "from": "mux_0:output",
                          "to": "value"
                        }
                      ]
                    },
                    "settings": {
                      "argumentOrdering": [
                        "check",
                        "truePath",
                        "falsePath",
                        "value"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      }
                    ],
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:if_14",
                    "branch": "if_14",
                    "recursive": false
                  },
                  {
                    "id": "array/empty",
                    "version": "0.2.0",
                    "inputPorts": {
                      "array": "generic"
                    },
                    "outputPorts": {
                      "isEmpty": "bool"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "array",
                        "isEmpty"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      }
                    ],
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:empty_15",
                    "branch": "empty_15",
                    "recursive": false
                  },
                  {
                    "id": "math/const",
                    "version": "0.3.0",
                    "inputPorts": {},
                    "outputPorts": {
                      "output": "number"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "output"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      }
                    ],
                    "params": {
                      "value": 100000000000
                    },
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:const(100000000000)_16",
                    "branch": "const(100000000000)_16",
                    "recursive": false
                  },
                  {
                    "id": "logic/if",
                    "version": "0.2.0",
                    "inputPorts": {
                      "check": "bool",
                      "truePath": "generic",
                      "falsePath": "generic"
                    },
                    "outputPorts": {
                      "value": "generic"
                    },
                    "implementation": {
                      "nodes": [
                        {
                          "id": "logic/mux",
                          "inputPorts": {
                            "input1": "generic",
                            "input2": "generic",
                            "control": "bool"
                          },
                          "outputPorts": {
                            "output": "generic"
                          },
                          "atomic": true,
                          "version": "0.3.0",
                          "specialForm": true,
                          "settings": {
                            "argumentOrdering": [
                              "input1",
                              "input2",
                              "control",
                              "output"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "min",
                              "branch": "min_27",
                              "branchPath": "selectionsort_37:min_27"
                            },
                            {
                              "meta": "logic/if",
                              "branch": "if_17",
                              "version": "0.2.0",
                              "branchPath": "selectionsort_37:min_27:if_17"
                            }
                          ],
                          "parent": "selectionsort_37:min_27:if_17",
                          "branchPath": "selectionsort_37:min_27:if_17:mux_0",
                          "branch": "mux_0",
                          "recursive": false
                        }
                      ],
                      "edges": [
                        {
                          "from": "truePath",
                          "to": "mux_0:input1"
                        },
                        {
                          "from": "falsePath",
                          "to": "mux_0:input2"
                        },
                        {
                          "from": "check",
                          "to": "mux_0:control"
                        },
                        {
                          "from": "mux_0:output",
                          "to": "value"
                        }
                      ]
                    },
                    "settings": {
                      "argumentOrdering": [
                        "check",
                        "truePath",
                        "falsePath",
                        "value"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      }
                    ],
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:if_17",
                    "branch": "if_17",
                    "recursive": false
                  },
                  {
                    "id": "math/less",
                    "version": "0.2.1",
                    "inputPorts": {
                      "isLess": "number",
                      "than": "number"
                    },
                    "outputPorts": {
                      "value": "bool"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "isLess",
                        "than",
                        "value"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      }
                    ],
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:less_18",
                    "branch": "less_18",
                    "recursive": false
                  },
                  {
                    "id": "array/first",
                    "version": "0.2.0",
                    "inputPorts": {
                      "array": "[generic]"
                    },
                    "outputPorts": {
                      "value": "generic"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "array",
                        "value"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      }
                    ],
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:first_19",
                    "branch": "first_19",
                    "recursive": false
                  },
                  {
                    "id": "min",
                    "inputPorts": {
                      "list": "generic"
                    },
                    "outputPorts": {
                      "value": "generic"
                    },
                    "settings": {
                      "argumentOrdering": [
                        "list",
                        "value"
                      ]
                    },
                    "implementation": {
                      "nodes": [
                        {
                          "meta": "logic/if",
                          "name": "if_14"
                        },
                        {
                          "meta": "array/empty",
                          "name": "empty_15"
                        },
                        {
                          "meta": "math/const",
                          "name": "const(100000000000)_16",
                          "params": {
                            "value": 100000000000
                          }
                        },
                        {
                          "meta": "logic/if",
                          "name": "if_17"
                        },
                        {
                          "meta": "math/less",
                          "name": "less_18"
                        },
                        {
                          "meta": "array/first",
                          "name": "first_19"
                        },
                        {
                          "meta": "min",
                          "name": "min_20"
                        },
                        {
                          "meta": "array/rest",
                          "name": "rest_21"
                        },
                        {
                          "meta": "array/first",
                          "name": "first_22"
                        },
                        {
                          "meta": "min",
                          "name": "min_23"
                        },
                        {
                          "meta": "array/rest",
                          "name": "rest_24"
                        }
                      ],
                      "edges": [
                        {
                          "from": "list",
                          "to": "empty_15:array"
                        },
                        {
                          "from": "empty_15:isEmpty",
                          "to": "if_14:check"
                        },
                        {
                          "from": "const(100000000000)_16:output",
                          "to": "if_14:truePath"
                        },
                        {
                          "from": "list",
                          "to": "first_19:array"
                        },
                        {
                          "from": "first_19:value",
                          "to": "less_18:isLess"
                        },
                        {
                          "from": "list",
                          "to": "rest_21:array"
                        },
                        {
                          "from": "rest_21:rest",
                          "to": "min_20:list"
                        },
                        {
                          "from": "min_20:value",
                          "to": "less_18:than"
                        },
                        {
                          "from": "less_18:value",
                          "to": "if_17:check"
                        },
                        {
                          "from": "list",
                          "to": "first_22:array"
                        },
                        {
                          "from": "first_22:value",
                          "to": "if_17:truePath"
                        },
                        {
                          "from": "list",
                          "to": "rest_24:array"
                        },
                        {
                          "from": "rest_24:rest",
                          "to": "min_23:list"
                        },
                        {
                          "from": "min_23:value",
                          "to": "if_17:falsePath"
                        },
                        {
                          "from": "if_17:value",
                          "to": "if_14:falsePath"
                        },
                        {
                          "from": "if_14:value",
                          "to": "value"
                        }
                      ]
                    },
                    "name": "defco_min",
                    "externalComponent": true,
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:min_20",
                    "branch": "min_20",
                    "recursesTo": {
                      "meta": "min",
                      "branch": "min_27",
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "path": [],
                          "branchPath": "selectionsort_37"
                        }
                      ],
                      "branchPath": "selectionsort_37:min_27"
                    },
                    "recursive": true
                  },
                  {
                    "id": "array/rest",
                    "version": "0.2.0",
                    "inputPorts": {
                      "array": "generic"
                    },
                    "outputPorts": {
                      "rest": "generic"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "array",
                        "rest"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      }
                    ],
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:rest_21",
                    "branch": "rest_21",
                    "recursive": false
                  },
                  {
                    "id": "array/first",
                    "version": "0.2.0",
                    "inputPorts": {
                      "array": "[generic]"
                    },
                    "outputPorts": {
                      "value": "generic"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "array",
                        "value"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      }
                    ],
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:first_22",
                    "branch": "first_22",
                    "recursive": false
                  },
                  {
                    "id": "min",
                    "inputPorts": {
                      "list": "generic"
                    },
                    "outputPorts": {
                      "value": "generic"
                    },
                    "settings": {
                      "argumentOrdering": [
                        "list",
                        "value"
                      ]
                    },
                    "implementation": {
                      "nodes": [
                        {
                          "meta": "logic/if",
                          "name": "if_14"
                        },
                        {
                          "meta": "array/empty",
                          "name": "empty_15"
                        },
                        {
                          "meta": "math/const",
                          "name": "const(100000000000)_16",
                          "params": {
                            "value": 100000000000
                          }
                        },
                        {
                          "meta": "logic/if",
                          "name": "if_17"
                        },
                        {
                          "meta": "math/less",
                          "name": "less_18"
                        },
                        {
                          "meta": "array/first",
                          "name": "first_19"
                        },
                        {
                          "meta": "min",
                          "name": "min_20"
                        },
                        {
                          "meta": "array/rest",
                          "name": "rest_21"
                        },
                        {
                          "meta": "array/first",
                          "name": "first_22"
                        },
                        {
                          "meta": "min",
                          "name": "min_23"
                        },
                        {
                          "meta": "array/rest",
                          "name": "rest_24"
                        }
                      ],
                      "edges": [
                        {
                          "from": "list",
                          "to": "empty_15:array"
                        },
                        {
                          "from": "empty_15:isEmpty",
                          "to": "if_14:check"
                        },
                        {
                          "from": "const(100000000000)_16:output",
                          "to": "if_14:truePath"
                        },
                        {
                          "from": "list",
                          "to": "first_19:array"
                        },
                        {
                          "from": "first_19:value",
                          "to": "less_18:isLess"
                        },
                        {
                          "from": "list",
                          "to": "rest_21:array"
                        },
                        {
                          "from": "rest_21:rest",
                          "to": "min_20:list"
                        },
                        {
                          "from": "min_20:value",
                          "to": "less_18:than"
                        },
                        {
                          "from": "less_18:value",
                          "to": "if_17:check"
                        },
                        {
                          "from": "list",
                          "to": "first_22:array"
                        },
                        {
                          "from": "first_22:value",
                          "to": "if_17:truePath"
                        },
                        {
                          "from": "list",
                          "to": "rest_24:array"
                        },
                        {
                          "from": "rest_24:rest",
                          "to": "min_23:list"
                        },
                        {
                          "from": "min_23:value",
                          "to": "if_17:falsePath"
                        },
                        {
                          "from": "if_17:value",
                          "to": "if_14:falsePath"
                        },
                        {
                          "from": "if_14:value",
                          "to": "value"
                        }
                      ]
                    },
                    "name": "defco_min",
                    "externalComponent": true,
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:min_23",
                    "branch": "min_23",
                    "recursesTo": {
                      "meta": "min",
                      "branch": "min_27",
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "path": [],
                          "branchPath": "selectionsort_37"
                        }
                      ],
                      "branchPath": "selectionsort_37:min_27"
                    },
                    "recursive": true
                  },
                  {
                    "id": "array/rest",
                    "version": "0.2.0",
                    "inputPorts": {
                      "array": "generic"
                    },
                    "outputPorts": {
                      "rest": "generic"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "array",
                        "rest"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      }
                    ],
                    "parent": "selectionsort_37:min_27",
                    "branchPath": "selectionsort_37:min_27:rest_24",
                    "branch": "rest_24",
                    "recursive": false
                  }
                ],
                "edges": [
                  {
                    "from": "list",
                    "to": "empty_15:array"
                  },
                  {
                    "from": "empty_15:isEmpty",
                    "to": "if_14:check"
                  },
                  {
                    "from": "const(100000000000)_16:output",
                    "to": "if_14:truePath"
                  },
                  {
                    "from": "list",
                    "to": "first_19:array"
                  },
                  {
                    "from": "first_19:value",
                    "to": "less_18:isLess"
                  },
                  {
                    "from": "list",
                    "to": "rest_21:array"
                  },
                  {
                    "from": "rest_21:rest",
                    "to": "min_20:list"
                  },
                  {
                    "from": "min_20:value",
                    "to": "less_18:than"
                  },
                  {
                    "from": "less_18:value",
                    "to": "if_17:check"
                  },
                  {
                    "from": "list",
                    "to": "first_22:array"
                  },
                  {
                    "from": "first_22:value",
                    "to": "if_17:truePath"
                  },
                  {
                    "from": "list",
                    "to": "rest_24:array"
                  },
                  {
                    "from": "rest_24:rest",
                    "to": "min_23:list"
                  },
                  {
                    "from": "min_23:value",
                    "to": "if_17:falsePath"
                  },
                  {
                    "from": "if_17:value",
                    "to": "if_14:falsePath"
                  },
                  {
                    "from": "if_14:value",
                    "to": "value"
                  }
                ]
              },
              "name": "defco_min",
              "externalComponent": true,
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                }
              ],
              "parent": "selectionsort_37",
              "branchPath": "selectionsort_37:min_27",
              "branch": "min_27",
              "recursive": false
            },
            {
              "id": "array/prepend",
              "version": "0.2.3",
              "inputPorts": {
                "array": "[generic]",
                "value": "generic"
              },
              "outputPorts": {
                "result": "[generic]"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "value",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                }
              ],
              "parent": "selectionsort_37",
              "branchPath": "selectionsort_37:prepend_28",
              "branch": "prepend_28",
              "recursive": false
            },
            {
              "id": "selectionsort",
              "inputPorts": {
                "list": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "settings": {
                "argumentOrdering": [
                  "list",
                  "value"
                ]
              },
              "implementation": {
                "nodes": [
                  {
                    "meta": "logic/if",
                    "name": "if_25"
                  },
                  {
                    "meta": "array/empty",
                    "name": "empty_26"
                  },
                  {
                    "meta": "min",
                    "name": "min_27"
                  },
                  {
                    "meta": "array/prepend",
                    "name": "prepend_28"
                  },
                  {
                    "meta": "selectionsort",
                    "name": "selectionsort_29"
                  },
                  {
                    "meta": "filter",
                    "name": "filter_30"
                  },
                  {
                    "meta": "functional/partial",
                    "name": "partial_31",
                    "params": {
                      "partial": 0
                    }
                  },
                  {
                    "meta": "functional/lambda",
                    "name": "lambda_32",
                    "outputPorts": {
                      "fn": "lambda"
                    },
                    "settings": {
                      "argumentOrdering": [
                        "fn"
                      ]
                    },
                    "inputPorts": {},
                    "data": {
                      "outputPorts": {
                        "value_0": "generic"
                      },
                      "settings": {
                        "argumentOrdering": [
                          "x",
                          "y",
                          "value_0"
                        ]
                      },
                      "inputPorts": {
                        "x": "generic",
                        "y": "generic"
                      },
                      "implementation": {
                        "nodes": [
                          {
                            "meta": "logic/not",
                            "name": "not_33"
                          },
                          {
                            "meta": "logic/equal",
                            "name": "equal_34"
                          }
                        ],
                        "edges": [
                          {
                            "from": "x",
                            "to": "equal_34:i1"
                          },
                          {
                            "from": "y",
                            "to": "equal_34:i2"
                          },
                          {
                            "from": "equal_34:eq",
                            "to": "not_33:input"
                          },
                          {
                            "from": "not_33:output",
                            "to": "value_0"
                          }
                        ]
                      }
                    }
                  }
                ],
                "edges": [
                  {
                    "from": "list",
                    "to": "empty_26:array"
                  },
                  {
                    "from": "empty_26:isEmpty",
                    "to": "if_25:check"
                  },
                  {
                    "from": "list",
                    "to": "if_25:truePath"
                  },
                  {
                    "from": "list",
                    "to": "min_27:list"
                  },
                  {
                    "from": "list",
                    "to": "filter_30:list"
                  },
                  {
                    "from": "lambda_32:fn",
                    "to": "partial_31:fn"
                  },
                  {
                    "from": "min_27:value",
                    "to": "partial_31:value"
                  },
                  {
                    "from": "partial_31:result",
                    "to": "filter_30:fn"
                  },
                  {
                    "from": "filter_30:value",
                    "to": "selectionsort_29:list"
                  },
                  {
                    "from": "selectionsort_29:value",
                    "to": "prepend_28:array"
                  },
                  {
                    "from": "min_27:value",
                    "to": "prepend_28:value"
                  },
                  {
                    "from": "prepend_28:result",
                    "to": "if_25:falsePath"
                  },
                  {
                    "from": "if_25:value",
                    "to": "value"
                  }
                ]
              },
              "name": "selectionsort_37",
              "externalComponent": true,
              "parent": "selectionsort_37",
              "branchPath": "selectionsort_37:selectionsort_29",
              "branch": "selectionsort_29",
              "recursesTo": {
                "meta": "selectionsort",
                "branch": "selectionsort_37",
                "path": [],
                "branchPath": "selectionsort_37"
              },
              "recursive": true
            },
            {
              "id": "filter",
              "inputPorts": {
                "list": "generic",
                "fn": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "settings": {
                "argumentOrdering": [
                  "list",
                  "fn",
                  "value"
                ]
              },
              "implementation": {
                "nodes": [
                  {
                    "id": "fold",
                    "inputPorts": {
                      "list": "generic",
                      "fn": "generic",
                      "init": "generic"
                    },
                    "outputPorts": {
                      "value": "generic"
                    },
                    "settings": {
                      "argumentOrdering": [
                        "list",
                        "fn",
                        "init",
                        "value"
                      ]
                    },
                    "implementation": {
                      "nodes": [
                        {
                          "id": "logic/if",
                          "version": "0.2.0",
                          "inputPorts": {
                            "check": "bool",
                            "truePath": "generic",
                            "falsePath": "generic"
                          },
                          "outputPorts": {
                            "value": "generic"
                          },
                          "implementation": {
                            "nodes": [
                              {
                                "id": "logic/mux",
                                "inputPorts": {
                                  "input1": "generic",
                                  "input2": "generic",
                                  "control": "bool"
                                },
                                "outputPorts": {
                                  "output": "generic"
                                },
                                "atomic": true,
                                "version": "0.3.0",
                                "specialForm": true,
                                "settings": {
                                  "argumentOrdering": [
                                    "input1",
                                    "input2",
                                    "control",
                                    "output"
                                  ]
                                },
                                "path": [
                                  {
                                    "meta": "selectionsort",
                                    "branch": "selectionsort_37",
                                    "branchPath": "selectionsort_37"
                                  },
                                  {
                                    "meta": "filter",
                                    "branch": "filter_30",
                                    "branchPath": "selectionsort_37:filter_30"
                                  },
                                  {
                                    "meta": "fold",
                                    "branch": "fold_7",
                                    "branchPath": "selectionsort_37:filter_30:fold_7"
                                  },
                                  {
                                    "meta": "logic/if",
                                    "branch": "if_0",
                                    "version": "0.2.0",
                                    "branchPath": "selectionsort_37:filter_30:fold_7:if_0"
                                  }
                                ],
                                "parent": "selectionsort_37:filter_30:fold_7:if_0",
                                "branchPath": "selectionsort_37:filter_30:fold_7:if_0:mux_0",
                                "branch": "mux_0",
                                "recursive": false
                              }
                            ],
                            "edges": [
                              {
                                "from": "truePath",
                                "to": "mux_0:input1"
                              },
                              {
                                "from": "falsePath",
                                "to": "mux_0:input2"
                              },
                              {
                                "from": "check",
                                "to": "mux_0:control"
                              },
                              {
                                "from": "mux_0:output",
                                "to": "value"
                              }
                            ]
                          },
                          "settings": {
                            "argumentOrdering": [
                              "check",
                              "truePath",
                              "falsePath",
                              "value"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "filter",
                              "branch": "filter_30",
                              "branchPath": "selectionsort_37:filter_30"
                            },
                            {
                              "meta": "fold",
                              "branch": "fold_7",
                              "branchPath": "selectionsort_37:filter_30:fold_7"
                            }
                          ],
                          "parent": "selectionsort_37:filter_30:fold_7",
                          "branchPath": "selectionsort_37:filter_30:fold_7:if_0",
                          "branch": "if_0",
                          "recursive": false
                        },
                        {
                          "id": "array/empty",
                          "version": "0.2.0",
                          "inputPorts": {
                            "array": "generic"
                          },
                          "outputPorts": {
                            "isEmpty": "bool"
                          },
                          "atomic": true,
                          "settings": {
                            "argumentOrdering": [
                              "array",
                              "isEmpty"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "filter",
                              "branch": "filter_30",
                              "branchPath": "selectionsort_37:filter_30"
                            },
                            {
                              "meta": "fold",
                              "branch": "fold_7",
                              "branchPath": "selectionsort_37:filter_30:fold_7"
                            }
                          ],
                          "parent": "selectionsort_37:filter_30:fold_7",
                          "branchPath": "selectionsort_37:filter_30:fold_7:empty_1",
                          "branch": "empty_1",
                          "recursive": false
                        },
                        {
                          "id": "functional/apply",
                          "version": "0.3.0",
                          "inputPorts": {
                            "fn": "generic",
                            "value": "generic"
                          },
                          "outputPorts": {
                            "result": "generic"
                          },
                          "implementation": {
                            "nodes": [
                              {
                                "id": "functional/call",
                                "version": "0.2.0",
                                "inputPorts": {
                                  "fn": "function"
                                },
                                "outputPorts": {
                                  "result": "function:return"
                                },
                                "atomic": true,
                                "specialForm": true,
                                "settings": {
                                  "argumentOrdering": [
                                    "fn",
                                    "result"
                                  ]
                                },
                                "path": [
                                  {
                                    "meta": "selectionsort",
                                    "branch": "selectionsort_37",
                                    "branchPath": "selectionsort_37"
                                  },
                                  {
                                    "meta": "filter",
                                    "branch": "filter_30",
                                    "branchPath": "selectionsort_37:filter_30"
                                  },
                                  {
                                    "meta": "fold",
                                    "branch": "fold_7",
                                    "branchPath": "selectionsort_37:filter_30:fold_7"
                                  },
                                  {
                                    "meta": "functional/apply",
                                    "branch": "apply_2",
                                    "version": "0.3.0",
                                    "branchPath": "selectionsort_37:filter_30:fold_7:apply_2"
                                  }
                                ],
                                "parent": "selectionsort_37:filter_30:fold_7:apply_2",
                                "branchPath": "selectionsort_37:filter_30:fold_7:apply_2:call_0",
                                "branch": "call_0",
                                "recursive": false
                              },
                              {
                                "id": "functional/partial",
                                "version": "0.2.1",
                                "inputPorts": {
                                  "fn": "function",
                                  "value": "function:arg"
                                },
                                "outputPorts": {
                                  "result": "function:partial"
                                },
                                "atomic": true,
                                "specialForm": true,
                                "settings": {
                                  "argumentOrdering": [
                                    "fn",
                                    "value",
                                    "result"
                                  ]
                                },
                                "path": [
                                  {
                                    "meta": "selectionsort",
                                    "branch": "selectionsort_37",
                                    "branchPath": "selectionsort_37"
                                  },
                                  {
                                    "meta": "filter",
                                    "branch": "filter_30",
                                    "branchPath": "selectionsort_37:filter_30"
                                  },
                                  {
                                    "meta": "fold",
                                    "branch": "fold_7",
                                    "branchPath": "selectionsort_37:filter_30:fold_7"
                                  },
                                  {
                                    "meta": "functional/apply",
                                    "branch": "apply_2",
                                    "version": "0.3.0",
                                    "branchPath": "selectionsort_37:filter_30:fold_7:apply_2"
                                  }
                                ],
                                "params": {
                                  "partial": 0
                                },
                                "parent": "selectionsort_37:filter_30:fold_7:apply_2",
                                "branchPath": "selectionsort_37:filter_30:fold_7:apply_2:partial_1",
                                "branch": "partial_1",
                                "recursive": false
                              }
                            ],
                            "edges": [
                              {
                                "from": "fn",
                                "to": "partial_1:fn"
                              },
                              {
                                "from": "value",
                                "to": "partial_1:value"
                              },
                              {
                                "from": "partial_1:result",
                                "to": "call_0:fn"
                              },
                              {
                                "from": "call_0:result",
                                "to": "result"
                              }
                            ]
                          },
                          "settings": {
                            "argumentOrdering": [
                              "fn",
                              "value",
                              "result"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "filter",
                              "branch": "filter_30",
                              "branchPath": "selectionsort_37:filter_30"
                            },
                            {
                              "meta": "fold",
                              "branch": "fold_7",
                              "branchPath": "selectionsort_37:filter_30:fold_7"
                            }
                          ],
                          "parent": "selectionsort_37:filter_30:fold_7",
                          "branchPath": "selectionsort_37:filter_30:fold_7:apply_2",
                          "branch": "apply_2",
                          "recursive": false
                        },
                        {
                          "id": "functional/partial",
                          "version": "0.2.1",
                          "inputPorts": {
                            "fn": "function",
                            "value": "function:arg"
                          },
                          "outputPorts": {
                            "result": "function:partial"
                          },
                          "atomic": true,
                          "specialForm": true,
                          "settings": {
                            "argumentOrdering": [
                              "fn",
                              "value",
                              "result"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "filter",
                              "branch": "filter_30",
                              "branchPath": "selectionsort_37:filter_30"
                            },
                            {
                              "meta": "fold",
                              "branch": "fold_7",
                              "branchPath": "selectionsort_37:filter_30:fold_7"
                            }
                          ],
                          "params": {
                            "partial": 1
                          },
                          "parent": "selectionsort_37:filter_30:fold_7",
                          "branchPath": "selectionsort_37:filter_30:fold_7:partial_3",
                          "branch": "partial_3",
                          "recursive": false
                        },
                        {
                          "id": "array/first",
                          "version": "0.2.0",
                          "inputPorts": {
                            "array": "[generic]"
                          },
                          "outputPorts": {
                            "value": "generic"
                          },
                          "atomic": true,
                          "settings": {
                            "argumentOrdering": [
                              "array",
                              "value"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "filter",
                              "branch": "filter_30",
                              "branchPath": "selectionsort_37:filter_30"
                            },
                            {
                              "meta": "fold",
                              "branch": "fold_7",
                              "branchPath": "selectionsort_37:filter_30:fold_7"
                            }
                          ],
                          "parent": "selectionsort_37:filter_30:fold_7",
                          "branchPath": "selectionsort_37:filter_30:fold_7:first_4",
                          "branch": "first_4",
                          "recursive": false
                        },
                        {
                          "id": "fold",
                          "inputPorts": {
                            "list": "generic",
                            "fn": "generic",
                            "init": "generic"
                          },
                          "outputPorts": {
                            "value": "generic"
                          },
                          "settings": {
                            "argumentOrdering": [
                              "list",
                              "fn",
                              "init",
                              "value"
                            ]
                          },
                          "implementation": {
                            "nodes": [
                              {
                                "meta": "logic/if",
                                "name": "if_0"
                              },
                              {
                                "meta": "array/empty",
                                "name": "empty_1"
                              },
                              {
                                "meta": "functional/apply",
                                "name": "apply_2"
                              },
                              {
                                "meta": "functional/partial",
                                "name": "partial_3",
                                "params": {
                                  "partial": 1
                                }
                              },
                              {
                                "meta": "array/first",
                                "name": "first_4"
                              },
                              {
                                "meta": "fold",
                                "name": "fold_5"
                              },
                              {
                                "meta": "array/rest",
                                "name": "rest_6"
                              }
                            ],
                            "edges": [
                              {
                                "from": "list",
                                "to": "empty_1:array"
                              },
                              {
                                "from": "empty_1:isEmpty",
                                "to": "if_0:check"
                              },
                              {
                                "from": "init",
                                "to": "if_0:truePath"
                              },
                              {
                                "from": "fn",
                                "to": "partial_3:fn"
                              },
                              {
                                "from": "list",
                                "to": "first_4:array"
                              },
                              {
                                "from": "first_4:value",
                                "to": "partial_3:value"
                              },
                              {
                                "from": "partial_3:result",
                                "to": "apply_2:fn"
                              },
                              {
                                "from": "list",
                                "to": "rest_6:array"
                              },
                              {
                                "from": "rest_6:rest",
                                "to": "fold_5:list"
                              },
                              {
                                "from": "fn",
                                "to": "fold_5:fn"
                              },
                              {
                                "from": "init",
                                "to": "fold_5:init"
                              },
                              {
                                "from": "fold_5:value",
                                "to": "apply_2:value"
                              },
                              {
                                "from": "apply_2:result",
                                "to": "if_0:falsePath"
                              },
                              {
                                "from": "if_0:value",
                                "to": "value"
                              }
                            ]
                          },
                          "name": "defco_fold",
                          "externalComponent": true,
                          "parent": "selectionsort_37:filter_30:fold_7",
                          "branchPath": "selectionsort_37:filter_30:fold_7:fold_5",
                          "branch": "fold_5",
                          "recursesTo": {
                            "meta": "fold",
                            "branch": "fold_7",
                            "path": [
                              {
                                "meta": "selectionsort",
                                "branch": "selectionsort_37",
                                "path": [],
                                "branchPath": "selectionsort_37"
                              },
                              {
                                "meta": "filter",
                                "branch": "filter_30",
                                "path": [
                                  {
                                    "meta": "selectionsort",
                                    "branch": "selectionsort_37",
                                    "path": [],
                                    "branchPath": "selectionsort_37"
                                  }
                                ],
                                "branchPath": "selectionsort_37:filter_30"
                              }
                            ],
                            "branchPath": "selectionsort_37:filter_30:fold_7"
                          },
                          "recursive": true
                        },
                        {
                          "id": "array/rest",
                          "version": "0.2.0",
                          "inputPorts": {
                            "array": "generic"
                          },
                          "outputPorts": {
                            "rest": "generic"
                          },
                          "atomic": true,
                          "settings": {
                            "argumentOrdering": [
                              "array",
                              "rest"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "filter",
                              "branch": "filter_30",
                              "branchPath": "selectionsort_37:filter_30"
                            },
                            {
                              "meta": "fold",
                              "branch": "fold_7",
                              "branchPath": "selectionsort_37:filter_30:fold_7"
                            }
                          ],
                          "parent": "selectionsort_37:filter_30:fold_7",
                          "branchPath": "selectionsort_37:filter_30:fold_7:rest_6",
                          "branch": "rest_6",
                          "recursive": false
                        }
                      ],
                      "edges": [
                        {
                          "from": "list",
                          "to": "empty_1:array"
                        },
                        {
                          "from": "empty_1:isEmpty",
                          "to": "if_0:check"
                        },
                        {
                          "from": "init",
                          "to": "if_0:truePath"
                        },
                        {
                          "from": "fn",
                          "to": "partial_3:fn"
                        },
                        {
                          "from": "list",
                          "to": "first_4:array"
                        },
                        {
                          "from": "first_4:value",
                          "to": "partial_3:value"
                        },
                        {
                          "from": "partial_3:result",
                          "to": "apply_2:fn"
                        },
                        {
                          "from": "list",
                          "to": "rest_6:array"
                        },
                        {
                          "from": "rest_6:rest",
                          "to": "fold_5:list"
                        },
                        {
                          "from": "fn",
                          "to": "fold_5:fn"
                        },
                        {
                          "from": "init",
                          "to": "fold_5:init"
                        },
                        {
                          "from": "fold_5:value",
                          "to": "apply_2:value"
                        },
                        {
                          "from": "apply_2:result",
                          "to": "if_0:falsePath"
                        },
                        {
                          "from": "if_0:value",
                          "to": "value"
                        }
                      ]
                    },
                    "name": "defco_fold",
                    "externalComponent": true,
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30",
                    "branchPath": "selectionsort_37:filter_30:fold_7",
                    "branch": "fold_7",
                    "recursive": false
                  },
                  {
                    "id": "functional/partial",
                    "version": "0.2.1",
                    "inputPorts": {
                      "fn": "function",
                      "value": "function:arg"
                    },
                    "outputPorts": {
                      "result": "function:partial"
                    },
                    "atomic": true,
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "fn",
                        "value",
                        "result"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      }
                    ],
                    "params": {
                      "partial": 0
                    },
                    "parent": "selectionsort_37:filter_30",
                    "branchPath": "selectionsort_37:filter_30:partial_8",
                    "branch": "partial_8",
                    "recursive": false
                  },
                  {
                    "id": "functional/lambda",
                    "version": "0.2.0",
                    "inputPorts": {},
                    "outputPorts": {
                      "fn": "function"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "fn"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      }
                    ],
                    "params": {
                      "implementation": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                    },
                    "parent": "selectionsort_37:filter_30",
                    "branchPath": "selectionsort_37:filter_30:lambda_9",
                    "branch": "lambda_9",
                    "isLambda": true,
                    "data": {
                      "outputPorts": {
                        "value_0": "generic"
                      },
                      "settings": {
                        "argumentOrdering": [
                          "fn",
                          "acc",
                          "cur",
                          "value_0"
                        ]
                      },
                      "inputPorts": {
                        "fn": "generic",
                        "acc": "generic",
                        "cur": "generic"
                      },
                      "implementation": {
                        "nodes": [
                          {
                            "id": "logic/if",
                            "version": "0.2.0",
                            "inputPorts": {
                              "check": "bool",
                              "truePath": "generic",
                              "falsePath": "generic"
                            },
                            "outputPorts": {
                              "value": "generic"
                            },
                            "implementation": {
                              "nodes": [
                                {
                                  "id": "logic/mux",
                                  "inputPorts": {
                                    "input1": "generic",
                                    "input2": "generic",
                                    "control": "bool"
                                  },
                                  "outputPorts": {
                                    "output": "generic"
                                  },
                                  "atomic": true,
                                  "version": "0.3.0",
                                  "specialForm": true,
                                  "settings": {
                                    "argumentOrdering": [
                                      "input1",
                                      "input2",
                                      "control",
                                      "output"
                                    ]
                                  },
                                  "path": [
                                    {
                                      "meta": "selectionsort",
                                      "branch": "selectionsort_37",
                                      "branchPath": "selectionsort_37"
                                    },
                                    {
                                      "meta": "filter",
                                      "branch": "filter_30",
                                      "branchPath": "selectionsort_37:filter_30"
                                    },
                                    {
                                      "meta": "functional/lambda",
                                      "branch": "lambda_9",
                                      "version": "0.2.0",
                                      "branchPath": "selectionsort_37:filter_30:lambda_9"
                                    },
                                    {
                                      "meta": "lambda_9_impl",
                                      "branch": "lambda_9_impl",
                                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                                    },
                                    {
                                      "meta": "logic/if",
                                      "branch": "if_10",
                                      "version": "0.2.0",
                                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10"
                                    }
                                  ],
                                  "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
                                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
                                  "branch": "mux_0",
                                  "recursive": false
                                }
                              ],
                              "edges": [
                                {
                                  "from": "truePath",
                                  "to": "mux_0:input1"
                                },
                                {
                                  "from": "falsePath",
                                  "to": "mux_0:input2"
                                },
                                {
                                  "from": "check",
                                  "to": "mux_0:control"
                                },
                                {
                                  "from": "mux_0:output",
                                  "to": "value"
                                }
                              ]
                            },
                            "settings": {
                              "argumentOrdering": [
                                "check",
                                "truePath",
                                "falsePath",
                                "value"
                              ]
                            },
                            "path": [
                              {
                                "meta": "selectionsort",
                                "branch": "selectionsort_37",
                                "branchPath": "selectionsort_37"
                              },
                              {
                                "meta": "filter",
                                "branch": "filter_30",
                                "branchPath": "selectionsort_37:filter_30"
                              },
                              {
                                "meta": "functional/lambda",
                                "branch": "lambda_9",
                                "version": "0.2.0",
                                "branchPath": "selectionsort_37:filter_30:lambda_9"
                              },
                              {
                                "meta": "lambda_9_impl",
                                "branch": "lambda_9_impl",
                                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                              }
                            ],
                            "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
                            "branch": "if_10",
                            "recursive": false
                          },
                          {
                            "id": "functional/apply",
                            "version": "0.3.0",
                            "inputPorts": {
                              "fn": "generic",
                              "value": "generic"
                            },
                            "outputPorts": {
                              "result": "generic"
                            },
                            "implementation": {
                              "nodes": [
                                {
                                  "id": "functional/call",
                                  "version": "0.2.0",
                                  "inputPorts": {
                                    "fn": "function"
                                  },
                                  "outputPorts": {
                                    "result": "function:return"
                                  },
                                  "atomic": true,
                                  "specialForm": true,
                                  "settings": {
                                    "argumentOrdering": [
                                      "fn",
                                      "result"
                                    ]
                                  },
                                  "path": [
                                    {
                                      "meta": "selectionsort",
                                      "branch": "selectionsort_37",
                                      "branchPath": "selectionsort_37"
                                    },
                                    {
                                      "meta": "filter",
                                      "branch": "filter_30",
                                      "branchPath": "selectionsort_37:filter_30"
                                    },
                                    {
                                      "meta": "functional/lambda",
                                      "branch": "lambda_9",
                                      "version": "0.2.0",
                                      "branchPath": "selectionsort_37:filter_30:lambda_9"
                                    },
                                    {
                                      "meta": "lambda_9_impl",
                                      "branch": "lambda_9_impl",
                                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                                    },
                                    {
                                      "meta": "functional/apply",
                                      "branch": "apply_11",
                                      "version": "0.3.0",
                                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
                                    }
                                  ],
                                  "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0",
                                  "branch": "call_0",
                                  "recursive": false
                                },
                                {
                                  "id": "functional/partial",
                                  "version": "0.2.1",
                                  "inputPorts": {
                                    "fn": "function",
                                    "value": "function:arg"
                                  },
                                  "outputPorts": {
                                    "result": "function:partial"
                                  },
                                  "atomic": true,
                                  "specialForm": true,
                                  "settings": {
                                    "argumentOrdering": [
                                      "fn",
                                      "value",
                                      "result"
                                    ]
                                  },
                                  "path": [
                                    {
                                      "meta": "selectionsort",
                                      "branch": "selectionsort_37",
                                      "branchPath": "selectionsort_37"
                                    },
                                    {
                                      "meta": "filter",
                                      "branch": "filter_30",
                                      "branchPath": "selectionsort_37:filter_30"
                                    },
                                    {
                                      "meta": "functional/lambda",
                                      "branch": "lambda_9",
                                      "version": "0.2.0",
                                      "branchPath": "selectionsort_37:filter_30:lambda_9"
                                    },
                                    {
                                      "meta": "lambda_9_impl",
                                      "branch": "lambda_9_impl",
                                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                                    },
                                    {
                                      "meta": "functional/apply",
                                      "branch": "apply_11",
                                      "version": "0.3.0",
                                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
                                    }
                                  ],
                                  "params": {
                                    "partial": 0
                                  },
                                  "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1",
                                  "branch": "partial_1",
                                  "recursive": false
                                }
                              ],
                              "edges": [
                                {
                                  "from": "fn",
                                  "to": "partial_1:fn"
                                },
                                {
                                  "from": "value",
                                  "to": "partial_1:value"
                                },
                                {
                                  "from": "partial_1:result",
                                  "to": "call_0:fn"
                                },
                                {
                                  "from": "call_0:result",
                                  "to": "result"
                                }
                              ]
                            },
                            "settings": {
                              "argumentOrdering": [
                                "fn",
                                "value",
                                "result"
                              ]
                            },
                            "path": [
                              {
                                "meta": "selectionsort",
                                "branch": "selectionsort_37",
                                "branchPath": "selectionsort_37"
                              },
                              {
                                "meta": "filter",
                                "branch": "filter_30",
                                "branchPath": "selectionsort_37:filter_30"
                              },
                              {
                                "meta": "functional/lambda",
                                "branch": "lambda_9",
                                "version": "0.2.0",
                                "branchPath": "selectionsort_37:filter_30:lambda_9"
                              },
                              {
                                "meta": "lambda_9_impl",
                                "branch": "lambda_9_impl",
                                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                              }
                            ],
                            "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                            "branch": "apply_11",
                            "recursive": false
                          },
                          {
                            "id": "array/prepend",
                            "version": "0.2.3",
                            "inputPorts": {
                              "array": "[generic]",
                              "value": "generic"
                            },
                            "outputPorts": {
                              "result": "[generic]"
                            },
                            "atomic": true,
                            "settings": {
                              "argumentOrdering": [
                                "array",
                                "value",
                                "result"
                              ]
                            },
                            "path": [
                              {
                                "meta": "selectionsort",
                                "branch": "selectionsort_37",
                                "branchPath": "selectionsort_37"
                              },
                              {
                                "meta": "filter",
                                "branch": "filter_30",
                                "branchPath": "selectionsort_37:filter_30"
                              },
                              {
                                "meta": "functional/lambda",
                                "branch": "lambda_9",
                                "version": "0.2.0",
                                "branchPath": "selectionsort_37:filter_30:lambda_9"
                              },
                              {
                                "meta": "lambda_9_impl",
                                "branch": "lambda_9_impl",
                                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                              }
                            ],
                            "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12",
                            "branch": "prepend_12",
                            "recursive": false
                          }
                        ],
                        "edges": [
                          {
                            "from": "fn",
                            "to": "apply_11:fn"
                          },
                          {
                            "from": "cur",
                            "to": "apply_11:value"
                          },
                          {
                            "from": "apply_11:result",
                            "to": "if_10:check"
                          },
                          {
                            "from": "acc",
                            "to": "prepend_12:array"
                          },
                          {
                            "from": "cur",
                            "to": "prepend_12:value"
                          },
                          {
                            "from": "prepend_12:result",
                            "to": "if_10:truePath"
                          },
                          {
                            "from": "acc",
                            "to": "if_10:falsePath"
                          },
                          {
                            "from": "if_10:value",
                            "to": "value_0"
                          }
                        ]
                      },
                      "id": "lambda_9_impl",
                      "externalComponent": true,
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "branchPath": "selectionsort_37"
                        },
                        {
                          "meta": "filter",
                          "branch": "filter_30",
                          "branchPath": "selectionsort_37:filter_30"
                        },
                        {
                          "meta": "functional/lambda",
                          "branch": "lambda_9",
                          "version": "0.2.0",
                          "branchPath": "selectionsort_37:filter_30:lambda_9"
                        }
                      ],
                      "parent": "selectionsort_37:filter_30:lambda_9",
                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                      "branch": "lambda_9_impl",
                      "recursive": false
                    },
                    "recursive": false
                  },
                  {
                    "id": "array/emptyArray",
                    "inputPorts": {},
                    "outputPorts": {
                      "output": "generic"
                    },
                    "atomic": true,
                    "version": "0.2.1",
                    "settings": {
                      "argumentOrdering": [
                        "output"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30",
                    "branchPath": "selectionsort_37:filter_30:array/emptyArray_13",
                    "branch": "array/emptyArray_13",
                    "recursive": false
                  }
                ],
                "edges": [
                  {
                    "from": "list",
                    "to": "fold_7:list"
                  },
                  {
                    "from": "lambda_9:fn",
                    "to": "partial_8:fn"
                  },
                  {
                    "from": "fn",
                    "to": "partial_8:value"
                  },
                  {
                    "from": "partial_8:result",
                    "to": "fold_7:fn"
                  },
                  {
                    "from": "array/emptyArray_13:output",
                    "to": "fold_7:init"
                  },
                  {
                    "from": "fold_7:value",
                    "to": "value"
                  }
                ]
              },
              "name": "defco_filter",
              "externalComponent": true,
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                }
              ],
              "parent": "selectionsort_37",
              "branchPath": "selectionsort_37:filter_30",
              "branch": "filter_30",
              "recursive": false
            },
            {
              "id": "functional/partial",
              "version": "0.2.1",
              "inputPorts": {
                "fn": "function",
                "value": "function:arg"
              },
              "outputPorts": {
                "result": "function:partial"
              },
              "atomic": true,
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "value",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                }
              ],
              "params": {
                "partial": 0
              },
              "parent": "selectionsort_37",
              "branchPath": "selectionsort_37:partial_31",
              "branch": "partial_31",
              "recursive": false
            },
            {
              "id": "functional/lambda",
              "version": "0.2.0",
              "inputPorts": {},
              "outputPorts": {
                "fn": "function"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "fn"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                }
              ],
              "params": {
                "implementation": "selectionsort_37:lambda_32:lambda_32_impl"
              },
              "parent": "selectionsort_37",
              "branchPath": "selectionsort_37:lambda_32",
              "branch": "lambda_32",
              "isLambda": true,
              "data": {
                "outputPorts": {
                  "value_0": "generic"
                },
                "settings": {
                  "argumentOrdering": [
                    "x",
                    "y",
                    "value_0"
                  ]
                },
                "inputPorts": {
                  "x": "generic",
                  "y": "generic"
                },
                "implementation": {
                  "nodes": [
                    {
                      "name": "NOT",
                      "id": "logic/not",
                      "inputPorts": {
                        "input": "bool"
                      },
                      "outputPorts": {
                        "output": "bool"
                      },
                      "atomic": true,
                      "version": "0.2.0",
                      "settings": {
                        "argumentOrdering": [
                          "input",
                          "output"
                        ]
                      },
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "branchPath": "selectionsort_37"
                        },
                        {
                          "meta": "functional/lambda",
                          "branch": "lambda_32",
                          "version": "0.2.0",
                          "branchPath": "selectionsort_37:lambda_32"
                        },
                        {
                          "meta": "lambda_32_impl",
                          "branch": "lambda_32_impl",
                          "branchPath": "selectionsort_37:lambda_32:lambda_32_impl"
                        }
                      ],
                      "parent": "selectionsort_37:lambda_32:lambda_32_impl",
                      "branchPath": "selectionsort_37:lambda_32:lambda_32_impl:not_33",
                      "branch": "not_33",
                      "recursive": false
                    },
                    {
                      "name": "EQUAL",
                      "id": "logic/equal",
                      "inputPorts": {
                        "i1": "generic",
                        "i2": "generic"
                      },
                      "outputPorts": {
                        "eq": "bool"
                      },
                      "atomic": true,
                      "version": "0.2.0",
                      "settings": {
                        "argumentOrdering": [
                          "i1",
                          "i2",
                          "eq"
                        ]
                      },
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "branchPath": "selectionsort_37"
                        },
                        {
                          "meta": "functional/lambda",
                          "branch": "lambda_32",
                          "version": "0.2.0",
                          "branchPath": "selectionsort_37:lambda_32"
                        },
                        {
                          "meta": "lambda_32_impl",
                          "branch": "lambda_32_impl",
                          "branchPath": "selectionsort_37:lambda_32:lambda_32_impl"
                        }
                      ],
                      "parent": "selectionsort_37:lambda_32:lambda_32_impl",
                      "branchPath": "selectionsort_37:lambda_32:lambda_32_impl:equal_34",
                      "branch": "equal_34",
                      "recursive": false
                    }
                  ],
                  "edges": [
                    {
                      "from": "x",
                      "to": "equal_34:i1"
                    },
                    {
                      "from": "y",
                      "to": "equal_34:i2"
                    },
                    {
                      "from": "equal_34:eq",
                      "to": "not_33:input"
                    },
                    {
                      "from": "not_33:output",
                      "to": "value_0"
                    }
                  ]
                },
                "id": "lambda_32_impl",
                "externalComponent": true,
                "path": [
                  {
                    "meta": "selectionsort",
                    "branch": "selectionsort_37",
                    "branchPath": "selectionsort_37"
                  },
                  {
                    "meta": "functional/lambda",
                    "branch": "lambda_32",
                    "version": "0.2.0",
                    "branchPath": "selectionsort_37:lambda_32"
                  }
                ],
                "parent": "selectionsort_37:lambda_32",
                "branchPath": "selectionsort_37:lambda_32:lambda_32_impl",
                "branch": "lambda_32_impl",
                "recursive": false
              },
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "list",
              "to": "empty_26:array"
            },
            {
              "from": "empty_26:isEmpty",
              "to": "if_25:check"
            },
            {
              "from": "list",
              "to": "if_25:truePath"
            },
            {
              "from": "list",
              "to": "min_27:list"
            },
            {
              "from": "list",
              "to": "filter_30:list"
            },
            {
              "from": "lambda_32:fn",
              "to": "partial_31:fn"
            },
            {
              "from": "min_27:value",
              "to": "partial_31:value"
            },
            {
              "from": "partial_31:result",
              "to": "filter_30:fn"
            },
            {
              "from": "filter_30:value",
              "to": "selectionsort_29:list"
            },
            {
              "from": "selectionsort_29:value",
              "to": "prepend_28:array"
            },
            {
              "from": "min_27:value",
              "to": "prepend_28:value"
            },
            {
              "from": "prepend_28:result",
              "to": "if_25:falsePath"
            },
            {
              "from": "if_25:value",
              "to": "value"
            }
          ]
        },
        "name": "selectionsort_37",
        "externalComponent": true,
        "path": [],
        "branchPath": "selectionsort_37",
        "branch": "selectionsort_37",
        "recursive": false,
        "recursiveRoot": true,
        "typeHint": {}
      }
    },
    {
      "v": "selectionsort_37:if_25",
      "value": {
        "id": "logic/if",
        "version": "0.2.0",
        "inputPorts": {
          "check": "bool",
          "truePath": "[int64]",
          "falsePath": "[int64]"
        },
        "outputPorts": {
          "value": "[int64]"
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/mux",
              "inputPorts": {
                "input1": "generic",
                "input2": "generic",
                "control": "bool"
              },
              "outputPorts": {
                "output": "generic"
              },
              "atomic": true,
              "version": "0.3.0",
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "input1",
                  "input2",
                  "control",
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "logic/if",
                  "branch": "if_25",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:if_25"
                }
              ],
              "parent": "selectionsort_37:if_25",
              "branchPath": "selectionsort_37:if_25:mux_0",
              "branch": "mux_0",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "truePath",
              "to": "mux_0:input1"
            },
            {
              "from": "falsePath",
              "to": "mux_0:input2"
            },
            {
              "from": "check",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "value"
            }
          ]
        },
        "settings": {
          "argumentOrdering": [
            "check",
            "truePath",
            "falsePath",
            "value"
          ],
          "genericType": {
            "truePath": "[int64]",
            "value": "[int64]",
            "falsePath": "[int64]"
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          }
        ],
        "parent": "selectionsort_37",
        "branchPath": "selectionsort_37:if_25",
        "branch": "if_25",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37"
    },
    {
      "v": "selectionsort_37:if_25:mux_0",
      "value": {
        "id": "logic/mux",
        "inputPorts": {
          "input1": "[int64]",
          "input2": "[int64]",
          "control": "bool"
        },
        "outputPorts": {
          "output": "[int64]"
        },
        "atomic": true,
        "version": "0.3.0",
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "input1",
            "input2",
            "control",
            "output"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "logic/if",
            "branch": "if_25",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:if_25"
          }
        ],
        "parent": "selectionsort_37:if_25",
        "branchPath": "selectionsort_37:if_25:mux_0",
        "branch": "mux_0",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:if_25"
    },
    {
      "v": "selectionsort_37:empty_26",
      "value": {
        "id": "array/empty",
        "version": "0.2.0",
        "inputPorts": {
          "array": "[int64]"
        },
        "outputPorts": {
          "isEmpty": "bool"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "isEmpty"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          }
        ],
        "parent": "selectionsort_37",
        "branchPath": "selectionsort_37:empty_26",
        "branch": "empty_26",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37"
    },
    {
      "v": "selectionsort_37:min_27",
      "value": {
        "id": "min",
        "inputPorts": {
          "list": "[int64]"
        },
        "outputPorts": {
          "value": "int64"
        },
        "settings": {
          "argumentOrdering": [
            "list",
            "value"
          ],
          "genericType": {
            "value": {
              "type": "type-ref",
              "node": "selectionsort_37:lambda_32:lambda_32_impl",
              "port": "x",
              "template": "generic"
            },
            "list": "[int64]"
          },
          "isGeneric": true
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/if",
              "version": "0.2.0",
              "inputPorts": {
                "check": "bool",
                "truePath": "generic",
                "falsePath": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "implementation": {
                "nodes": [
                  {
                    "id": "logic/mux",
                    "inputPorts": {
                      "input1": "generic",
                      "input2": "generic",
                      "control": "bool"
                    },
                    "outputPorts": {
                      "output": "generic"
                    },
                    "atomic": true,
                    "version": "0.3.0",
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "input1",
                        "input2",
                        "control",
                        "output"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      },
                      {
                        "meta": "logic/if",
                        "branch": "if_14",
                        "version": "0.2.0",
                        "branchPath": "selectionsort_37:min_27:if_14"
                      }
                    ],
                    "parent": "selectionsort_37:min_27:if_14",
                    "branchPath": "selectionsort_37:min_27:if_14:mux_0",
                    "branch": "mux_0",
                    "recursive": false
                  }
                ],
                "edges": [
                  {
                    "from": "truePath",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "falsePath",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "check",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "value"
                  }
                ]
              },
              "settings": {
                "argumentOrdering": [
                  "check",
                  "truePath",
                  "falsePath",
                  "value"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                }
              ],
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:if_14",
              "branch": "if_14",
              "recursive": false
            },
            {
              "id": "array/empty",
              "version": "0.2.0",
              "inputPorts": {
                "array": "generic"
              },
              "outputPorts": {
                "isEmpty": "bool"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "isEmpty"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                }
              ],
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:empty_15",
              "branch": "empty_15",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.3.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                }
              ],
              "params": {
                "value": 100000000000
              },
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:const(100000000000)_16",
              "branch": "const(100000000000)_16",
              "recursive": false
            },
            {
              "id": "logic/if",
              "version": "0.2.0",
              "inputPorts": {
                "check": "bool",
                "truePath": "generic",
                "falsePath": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "implementation": {
                "nodes": [
                  {
                    "id": "logic/mux",
                    "inputPorts": {
                      "input1": "generic",
                      "input2": "generic",
                      "control": "bool"
                    },
                    "outputPorts": {
                      "output": "generic"
                    },
                    "atomic": true,
                    "version": "0.3.0",
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "input1",
                        "input2",
                        "control",
                        "output"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "min",
                        "branch": "min_27",
                        "branchPath": "selectionsort_37:min_27"
                      },
                      {
                        "meta": "logic/if",
                        "branch": "if_17",
                        "version": "0.2.0",
                        "branchPath": "selectionsort_37:min_27:if_17"
                      }
                    ],
                    "parent": "selectionsort_37:min_27:if_17",
                    "branchPath": "selectionsort_37:min_27:if_17:mux_0",
                    "branch": "mux_0",
                    "recursive": false
                  }
                ],
                "edges": [
                  {
                    "from": "truePath",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "falsePath",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "check",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "value"
                  }
                ]
              },
              "settings": {
                "argumentOrdering": [
                  "check",
                  "truePath",
                  "falsePath",
                  "value"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                }
              ],
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:if_17",
              "branch": "if_17",
              "recursive": false
            },
            {
              "id": "math/less",
              "version": "0.2.1",
              "inputPorts": {
                "isLess": "number",
                "than": "number"
              },
              "outputPorts": {
                "value": "bool"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "isLess",
                  "than",
                  "value"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                }
              ],
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:less_18",
              "branch": "less_18",
              "recursive": false
            },
            {
              "id": "array/first",
              "version": "0.2.0",
              "inputPorts": {
                "array": "[generic]"
              },
              "outputPorts": {
                "value": "generic"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "value"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                }
              ],
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:first_19",
              "branch": "first_19",
              "recursive": false
            },
            {
              "id": "min",
              "inputPorts": {
                "list": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "settings": {
                "argumentOrdering": [
                  "list",
                  "value"
                ]
              },
              "implementation": {
                "nodes": [
                  {
                    "meta": "logic/if",
                    "name": "if_14"
                  },
                  {
                    "meta": "array/empty",
                    "name": "empty_15"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(100000000000)_16",
                    "params": {
                      "value": 100000000000
                    }
                  },
                  {
                    "meta": "logic/if",
                    "name": "if_17"
                  },
                  {
                    "meta": "math/less",
                    "name": "less_18"
                  },
                  {
                    "meta": "array/first",
                    "name": "first_19"
                  },
                  {
                    "meta": "min",
                    "name": "min_20"
                  },
                  {
                    "meta": "array/rest",
                    "name": "rest_21"
                  },
                  {
                    "meta": "array/first",
                    "name": "first_22"
                  },
                  {
                    "meta": "min",
                    "name": "min_23"
                  },
                  {
                    "meta": "array/rest",
                    "name": "rest_24"
                  }
                ],
                "edges": [
                  {
                    "from": "list",
                    "to": "empty_15:array"
                  },
                  {
                    "from": "empty_15:isEmpty",
                    "to": "if_14:check"
                  },
                  {
                    "from": "const(100000000000)_16:output",
                    "to": "if_14:truePath"
                  },
                  {
                    "from": "list",
                    "to": "first_19:array"
                  },
                  {
                    "from": "first_19:value",
                    "to": "less_18:isLess"
                  },
                  {
                    "from": "list",
                    "to": "rest_21:array"
                  },
                  {
                    "from": "rest_21:rest",
                    "to": "min_20:list"
                  },
                  {
                    "from": "min_20:value",
                    "to": "less_18:than"
                  },
                  {
                    "from": "less_18:value",
                    "to": "if_17:check"
                  },
                  {
                    "from": "list",
                    "to": "first_22:array"
                  },
                  {
                    "from": "first_22:value",
                    "to": "if_17:truePath"
                  },
                  {
                    "from": "list",
                    "to": "rest_24:array"
                  },
                  {
                    "from": "rest_24:rest",
                    "to": "min_23:list"
                  },
                  {
                    "from": "min_23:value",
                    "to": "if_17:falsePath"
                  },
                  {
                    "from": "if_17:value",
                    "to": "if_14:falsePath"
                  },
                  {
                    "from": "if_14:value",
                    "to": "value"
                  }
                ]
              },
              "name": "defco_min",
              "externalComponent": true,
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:min_20",
              "branch": "min_20",
              "recursesTo": {
                "meta": "min",
                "branch": "min_27",
                "path": [
                  {
                    "meta": "selectionsort",
                    "branch": "selectionsort_37",
                    "path": [],
                    "branchPath": "selectionsort_37"
                  }
                ],
                "branchPath": "selectionsort_37:min_27"
              },
              "recursive": true
            },
            {
              "id": "array/rest",
              "version": "0.2.0",
              "inputPorts": {
                "array": "generic"
              },
              "outputPorts": {
                "rest": "generic"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "rest"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                }
              ],
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:rest_21",
              "branch": "rest_21",
              "recursive": false
            },
            {
              "id": "array/first",
              "version": "0.2.0",
              "inputPorts": {
                "array": "[generic]"
              },
              "outputPorts": {
                "value": "generic"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "value"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                }
              ],
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:first_22",
              "branch": "first_22",
              "recursive": false
            },
            {
              "id": "min",
              "inputPorts": {
                "list": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "settings": {
                "argumentOrdering": [
                  "list",
                  "value"
                ]
              },
              "implementation": {
                "nodes": [
                  {
                    "meta": "logic/if",
                    "name": "if_14"
                  },
                  {
                    "meta": "array/empty",
                    "name": "empty_15"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(100000000000)_16",
                    "params": {
                      "value": 100000000000
                    }
                  },
                  {
                    "meta": "logic/if",
                    "name": "if_17"
                  },
                  {
                    "meta": "math/less",
                    "name": "less_18"
                  },
                  {
                    "meta": "array/first",
                    "name": "first_19"
                  },
                  {
                    "meta": "min",
                    "name": "min_20"
                  },
                  {
                    "meta": "array/rest",
                    "name": "rest_21"
                  },
                  {
                    "meta": "array/first",
                    "name": "first_22"
                  },
                  {
                    "meta": "min",
                    "name": "min_23"
                  },
                  {
                    "meta": "array/rest",
                    "name": "rest_24"
                  }
                ],
                "edges": [
                  {
                    "from": "list",
                    "to": "empty_15:array"
                  },
                  {
                    "from": "empty_15:isEmpty",
                    "to": "if_14:check"
                  },
                  {
                    "from": "const(100000000000)_16:output",
                    "to": "if_14:truePath"
                  },
                  {
                    "from": "list",
                    "to": "first_19:array"
                  },
                  {
                    "from": "first_19:value",
                    "to": "less_18:isLess"
                  },
                  {
                    "from": "list",
                    "to": "rest_21:array"
                  },
                  {
                    "from": "rest_21:rest",
                    "to": "min_20:list"
                  },
                  {
                    "from": "min_20:value",
                    "to": "less_18:than"
                  },
                  {
                    "from": "less_18:value",
                    "to": "if_17:check"
                  },
                  {
                    "from": "list",
                    "to": "first_22:array"
                  },
                  {
                    "from": "first_22:value",
                    "to": "if_17:truePath"
                  },
                  {
                    "from": "list",
                    "to": "rest_24:array"
                  },
                  {
                    "from": "rest_24:rest",
                    "to": "min_23:list"
                  },
                  {
                    "from": "min_23:value",
                    "to": "if_17:falsePath"
                  },
                  {
                    "from": "if_17:value",
                    "to": "if_14:falsePath"
                  },
                  {
                    "from": "if_14:value",
                    "to": "value"
                  }
                ]
              },
              "name": "defco_min",
              "externalComponent": true,
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:min_23",
              "branch": "min_23",
              "recursesTo": {
                "meta": "min",
                "branch": "min_27",
                "path": [
                  {
                    "meta": "selectionsort",
                    "branch": "selectionsort_37",
                    "path": [],
                    "branchPath": "selectionsort_37"
                  }
                ],
                "branchPath": "selectionsort_37:min_27"
              },
              "recursive": true
            },
            {
              "id": "array/rest",
              "version": "0.2.0",
              "inputPorts": {
                "array": "generic"
              },
              "outputPorts": {
                "rest": "generic"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "rest"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                }
              ],
              "parent": "selectionsort_37:min_27",
              "branchPath": "selectionsort_37:min_27:rest_24",
              "branch": "rest_24",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "list",
              "to": "empty_15:array"
            },
            {
              "from": "empty_15:isEmpty",
              "to": "if_14:check"
            },
            {
              "from": "const(100000000000)_16:output",
              "to": "if_14:truePath"
            },
            {
              "from": "list",
              "to": "first_19:array"
            },
            {
              "from": "first_19:value",
              "to": "less_18:isLess"
            },
            {
              "from": "list",
              "to": "rest_21:array"
            },
            {
              "from": "rest_21:rest",
              "to": "min_20:list"
            },
            {
              "from": "min_20:value",
              "to": "less_18:than"
            },
            {
              "from": "less_18:value",
              "to": "if_17:check"
            },
            {
              "from": "list",
              "to": "first_22:array"
            },
            {
              "from": "first_22:value",
              "to": "if_17:truePath"
            },
            {
              "from": "list",
              "to": "rest_24:array"
            },
            {
              "from": "rest_24:rest",
              "to": "min_23:list"
            },
            {
              "from": "min_23:value",
              "to": "if_17:falsePath"
            },
            {
              "from": "if_17:value",
              "to": "if_14:falsePath"
            },
            {
              "from": "if_14:value",
              "to": "value"
            }
          ]
        },
        "name": "defco_min",
        "externalComponent": true,
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          }
        ],
        "parent": "selectionsort_37",
        "branchPath": "selectionsort_37:min_27",
        "branch": "min_27",
        "recursive": false,
        "recursiveRoot": true,
        "typeHint": {}
      },
      "parent": "selectionsort_37"
    },
    {
      "v": "selectionsort_37:min_27:if_14",
      "value": {
        "id": "logic/if",
        "version": "0.2.0",
        "inputPorts": {
          "check": "bool",
          "truePath": "int64",
          "falsePath": "int64"
        },
        "outputPorts": {
          "value": "int64"
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/mux",
              "inputPorts": {
                "input1": "generic",
                "input2": "generic",
                "control": "bool"
              },
              "outputPorts": {
                "output": "generic"
              },
              "atomic": true,
              "version": "0.3.0",
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "input1",
                  "input2",
                  "control",
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                },
                {
                  "meta": "logic/if",
                  "branch": "if_14",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:min_27:if_14"
                }
              ],
              "parent": "selectionsort_37:min_27:if_14",
              "branchPath": "selectionsort_37:min_27:if_14:mux_0",
              "branch": "mux_0",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "truePath",
              "to": "mux_0:input1"
            },
            {
              "from": "falsePath",
              "to": "mux_0:input2"
            },
            {
              "from": "check",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "value"
            }
          ]
        },
        "settings": {
          "argumentOrdering": [
            "check",
            "truePath",
            "falsePath",
            "value"
          ],
          "genericType": {
            "truePath": "int64",
            "value": "int64",
            "falsePath": "int64"
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          }
        ],
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:if_14",
        "branch": "if_14",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:min_27:if_14:mux_0",
      "value": {
        "id": "logic/mux",
        "inputPorts": {
          "input1": "int64",
          "input2": "int64",
          "control": "bool"
        },
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "version": "0.3.0",
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "input1",
            "input2",
            "control",
            "output"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          },
          {
            "meta": "logic/if",
            "branch": "if_14",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:min_27:if_14"
          }
        ],
        "parent": "selectionsort_37:min_27:if_14",
        "branchPath": "selectionsort_37:min_27:if_14:mux_0",
        "branch": "mux_0",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27:if_14"
    },
    {
      "v": "selectionsort_37:min_27:empty_15",
      "value": {
        "id": "array/empty",
        "version": "0.2.0",
        "inputPorts": {
          "array": "[int64]"
        },
        "outputPorts": {
          "isEmpty": "bool"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "isEmpty"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          }
        ],
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:empty_15",
        "branch": "empty_15",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:min_27:const(100000000000)_16",
      "value": {
        "id": "math/const",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "output"
          ]
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          }
        ],
        "params": {
          "value": 100000000000
        },
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:const(100000000000)_16",
        "branch": "const(100000000000)_16",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:min_27:if_17",
      "value": {
        "id": "logic/if",
        "version": "0.2.0",
        "inputPorts": {
          "check": "bool",
          "truePath": "int64",
          "falsePath": "int64"
        },
        "outputPorts": {
          "value": "int64"
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/mux",
              "inputPorts": {
                "input1": "generic",
                "input2": "generic",
                "control": "bool"
              },
              "outputPorts": {
                "output": "generic"
              },
              "atomic": true,
              "version": "0.3.0",
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "input1",
                  "input2",
                  "control",
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "min",
                  "branch": "min_27",
                  "branchPath": "selectionsort_37:min_27"
                },
                {
                  "meta": "logic/if",
                  "branch": "if_17",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:min_27:if_17"
                }
              ],
              "parent": "selectionsort_37:min_27:if_17",
              "branchPath": "selectionsort_37:min_27:if_17:mux_0",
              "branch": "mux_0",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "truePath",
              "to": "mux_0:input1"
            },
            {
              "from": "falsePath",
              "to": "mux_0:input2"
            },
            {
              "from": "check",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "value"
            }
          ]
        },
        "settings": {
          "argumentOrdering": [
            "check",
            "truePath",
            "falsePath",
            "value"
          ],
          "genericType": {
            "falsePath": {
              "type": "type-ref",
              "node": "selectionsort_37:lambda_32:lambda_32_impl",
              "port": "x",
              "template": "generic"
            },
            "value": "int64",
            "truePath": {
              "type": "type-ref",
              "node": "selectionsort_37:lambda_32:lambda_32_impl",
              "port": "x",
              "template": "generic"
            }
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          }
        ],
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:if_17",
        "branch": "if_17",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:min_27:if_17:mux_0",
      "value": {
        "id": "logic/mux",
        "inputPorts": {
          "input1": "int64",
          "input2": "int64",
          "control": "bool"
        },
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "version": "0.3.0",
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "input1",
            "input2",
            "control",
            "output"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          },
          {
            "meta": "logic/if",
            "branch": "if_17",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:min_27:if_17"
          }
        ],
        "parent": "selectionsort_37:min_27:if_17",
        "branchPath": "selectionsort_37:min_27:if_17:mux_0",
        "branch": "mux_0",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27:if_17"
    },
    {
      "v": "selectionsort_37:min_27:less_18",
      "value": {
        "id": "math/less",
        "version": "0.2.1",
        "inputPorts": {
          "isLess": "int64",
          "than": "int64"
        },
        "outputPorts": {
          "value": "bool"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "isLess",
            "than",
            "value"
          ]
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          }
        ],
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:less_18",
        "branch": "less_18",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:min_27:first_19",
      "value": {
        "id": "array/first",
        "version": "0.2.0",
        "inputPorts": {
          "array": "[int64]"
        },
        "outputPorts": {
          "value": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "value"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          }
        ],
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:first_19",
        "branch": "first_19",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:min_27:min_20",
      "value": {
        "id": "min",
        "inputPorts": {
          "list": "[int64]"
        },
        "outputPorts": {
          "value": "int64"
        },
        "settings": {
          "argumentOrdering": [
            "list",
            "value"
          ],
          "genericType": {
            "value": "int64"
          },
          "isGeneric": true
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/if",
              "name": "if_14"
            },
            {
              "meta": "array/empty",
              "name": "empty_15"
            },
            {
              "meta": "math/const",
              "name": "const(100000000000)_16",
              "params": {
                "value": 100000000000
              }
            },
            {
              "meta": "logic/if",
              "name": "if_17"
            },
            {
              "meta": "math/less",
              "name": "less_18"
            },
            {
              "meta": "array/first",
              "name": "first_19"
            },
            {
              "meta": "min",
              "name": "min_20"
            },
            {
              "meta": "array/rest",
              "name": "rest_21"
            },
            {
              "meta": "array/first",
              "name": "first_22"
            },
            {
              "meta": "min",
              "name": "min_23"
            },
            {
              "meta": "array/rest",
              "name": "rest_24"
            }
          ],
          "edges": [
            {
              "from": "list",
              "to": "empty_15:array"
            },
            {
              "from": "empty_15:isEmpty",
              "to": "if_14:check"
            },
            {
              "from": "const(100000000000)_16:output",
              "to": "if_14:truePath"
            },
            {
              "from": "list",
              "to": "first_19:array"
            },
            {
              "from": "first_19:value",
              "to": "less_18:isLess"
            },
            {
              "from": "list",
              "to": "rest_21:array"
            },
            {
              "from": "rest_21:rest",
              "to": "min_20:list"
            },
            {
              "from": "min_20:value",
              "to": "less_18:than"
            },
            {
              "from": "less_18:value",
              "to": "if_17:check"
            },
            {
              "from": "list",
              "to": "first_22:array"
            },
            {
              "from": "first_22:value",
              "to": "if_17:truePath"
            },
            {
              "from": "list",
              "to": "rest_24:array"
            },
            {
              "from": "rest_24:rest",
              "to": "min_23:list"
            },
            {
              "from": "min_23:value",
              "to": "if_17:falsePath"
            },
            {
              "from": "if_17:value",
              "to": "if_14:falsePath"
            },
            {
              "from": "if_14:value",
              "to": "value"
            }
          ]
        },
        "name": "defco_min",
        "externalComponent": true,
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:min_20",
        "branch": "min_20",
        "recursesTo": {
          "meta": "min",
          "branch": "min_27",
          "path": [
            {
              "meta": "selectionsort",
              "branch": "selectionsort_37",
              "path": [],
              "branchPath": "selectionsort_37"
            }
          ],
          "branchPath": "selectionsort_37:min_27"
        },
        "recursive": true,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:min_27:rest_21",
      "value": {
        "id": "array/rest",
        "version": "0.2.0",
        "inputPorts": {
          "array": "[int64]"
        },
        "outputPorts": {
          "rest": "[int64]"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "rest"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          }
        ],
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:rest_21",
        "branch": "rest_21",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:min_27:first_22",
      "value": {
        "id": "array/first",
        "version": "0.2.0",
        "inputPorts": {
          "array": "[int64]"
        },
        "outputPorts": {
          "value": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "value"
          ],
          "genericType": {
            "type": "type-ref",
            "node": "selectionsort_37:lambda_32:lambda_32_impl",
            "port": "x",
            "template": "generic"
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          }
        ],
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:first_22",
        "branch": "first_22",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:min_27:min_23",
      "value": {
        "id": "min",
        "inputPorts": {
          "list": "[int64]"
        },
        "outputPorts": {
          "value": "int64"
        },
        "settings": {
          "argumentOrdering": [
            "list",
            "value"
          ],
          "isGeneric": true
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/if",
              "name": "if_14"
            },
            {
              "meta": "array/empty",
              "name": "empty_15"
            },
            {
              "meta": "math/const",
              "name": "const(100000000000)_16",
              "params": {
                "value": 100000000000
              }
            },
            {
              "meta": "logic/if",
              "name": "if_17"
            },
            {
              "meta": "math/less",
              "name": "less_18"
            },
            {
              "meta": "array/first",
              "name": "first_19"
            },
            {
              "meta": "min",
              "name": "min_20"
            },
            {
              "meta": "array/rest",
              "name": "rest_21"
            },
            {
              "meta": "array/first",
              "name": "first_22"
            },
            {
              "meta": "min",
              "name": "min_23"
            },
            {
              "meta": "array/rest",
              "name": "rest_24"
            }
          ],
          "edges": [
            {
              "from": "list",
              "to": "empty_15:array"
            },
            {
              "from": "empty_15:isEmpty",
              "to": "if_14:check"
            },
            {
              "from": "const(100000000000)_16:output",
              "to": "if_14:truePath"
            },
            {
              "from": "list",
              "to": "first_19:array"
            },
            {
              "from": "first_19:value",
              "to": "less_18:isLess"
            },
            {
              "from": "list",
              "to": "rest_21:array"
            },
            {
              "from": "rest_21:rest",
              "to": "min_20:list"
            },
            {
              "from": "min_20:value",
              "to": "less_18:than"
            },
            {
              "from": "less_18:value",
              "to": "if_17:check"
            },
            {
              "from": "list",
              "to": "first_22:array"
            },
            {
              "from": "first_22:value",
              "to": "if_17:truePath"
            },
            {
              "from": "list",
              "to": "rest_24:array"
            },
            {
              "from": "rest_24:rest",
              "to": "min_23:list"
            },
            {
              "from": "min_23:value",
              "to": "if_17:falsePath"
            },
            {
              "from": "if_17:value",
              "to": "if_14:falsePath"
            },
            {
              "from": "if_14:value",
              "to": "value"
            }
          ]
        },
        "name": "defco_min",
        "externalComponent": true,
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:min_23",
        "branch": "min_23",
        "recursesTo": {
          "meta": "min",
          "branch": "min_27",
          "path": [
            {
              "meta": "selectionsort",
              "branch": "selectionsort_37",
              "path": [],
              "branchPath": "selectionsort_37"
            }
          ],
          "branchPath": "selectionsort_37:min_27"
        },
        "recursive": true,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:min_27:rest_24",
      "value": {
        "id": "array/rest",
        "version": "0.2.0",
        "inputPorts": {
          "array": "[int64]"
        },
        "outputPorts": {
          "rest": "[int64]"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "rest"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "min",
            "branch": "min_27",
            "branchPath": "selectionsort_37:min_27"
          }
        ],
        "parent": "selectionsort_37:min_27",
        "branchPath": "selectionsort_37:min_27:rest_24",
        "branch": "rest_24",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:min_27"
    },
    {
      "v": "selectionsort_37:prepend_28",
      "value": {
        "id": "array/prepend",
        "version": "0.2.3",
        "inputPorts": {
          "array": "[int64]",
          "value": "int64"
        },
        "outputPorts": {
          "result": "[int64]"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "value",
            "result"
          ],
          "genericType": {
            "type": "type-ref",
            "node": "selectionsort_37:lambda_32:lambda_32_impl",
            "port": "x",
            "template": "generic"
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          }
        ],
        "parent": "selectionsort_37",
        "branchPath": "selectionsort_37:prepend_28",
        "branch": "prepend_28",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37"
    },
    {
      "v": "selectionsort_37:selectionsort_29",
      "value": {
        "id": "selectionsort",
        "inputPorts": {
          "list": "[int64]"
        },
        "outputPorts": {
          "value": "[int64]"
        },
        "settings": {
          "argumentOrdering": [
            "list",
            "value"
          ]
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/if",
              "name": "if_25"
            },
            {
              "meta": "array/empty",
              "name": "empty_26"
            },
            {
              "meta": "min",
              "name": "min_27"
            },
            {
              "meta": "array/prepend",
              "name": "prepend_28"
            },
            {
              "meta": "selectionsort",
              "name": "selectionsort_29"
            },
            {
              "meta": "filter",
              "name": "filter_30"
            },
            {
              "meta": "functional/partial",
              "name": "partial_31",
              "params": {
                "partial": 0
              }
            },
            {
              "meta": "functional/lambda",
              "name": "lambda_32",
              "outputPorts": {
                "fn": "lambda"
              },
              "settings": {
                "argumentOrdering": [
                  "fn"
                ]
              },
              "inputPorts": {},
              "data": {
                "outputPorts": {
                  "value_0": "generic"
                },
                "settings": {
                  "argumentOrdering": [
                    "x",
                    "y",
                    "value_0"
                  ]
                },
                "inputPorts": {
                  "x": "generic",
                  "y": "generic"
                },
                "implementation": {
                  "nodes": [
                    {
                      "meta": "logic/not",
                      "name": "not_33"
                    },
                    {
                      "meta": "logic/equal",
                      "name": "equal_34"
                    }
                  ],
                  "edges": [
                    {
                      "from": "x",
                      "to": "equal_34:i1"
                    },
                    {
                      "from": "y",
                      "to": "equal_34:i2"
                    },
                    {
                      "from": "equal_34:eq",
                      "to": "not_33:input"
                    },
                    {
                      "from": "not_33:output",
                      "to": "value_0"
                    }
                  ]
                }
              }
            }
          ],
          "edges": [
            {
              "from": "list",
              "to": "empty_26:array"
            },
            {
              "from": "empty_26:isEmpty",
              "to": "if_25:check"
            },
            {
              "from": "list",
              "to": "if_25:truePath"
            },
            {
              "from": "list",
              "to": "min_27:list"
            },
            {
              "from": "list",
              "to": "filter_30:list"
            },
            {
              "from": "lambda_32:fn",
              "to": "partial_31:fn"
            },
            {
              "from": "min_27:value",
              "to": "partial_31:value"
            },
            {
              "from": "partial_31:result",
              "to": "filter_30:fn"
            },
            {
              "from": "filter_30:value",
              "to": "selectionsort_29:list"
            },
            {
              "from": "selectionsort_29:value",
              "to": "prepend_28:array"
            },
            {
              "from": "min_27:value",
              "to": "prepend_28:value"
            },
            {
              "from": "prepend_28:result",
              "to": "if_25:falsePath"
            },
            {
              "from": "if_25:value",
              "to": "value"
            }
          ]
        },
        "name": "selectionsort_37",
        "externalComponent": true,
        "parent": "selectionsort_37",
        "branchPath": "selectionsort_37:selectionsort_29",
        "branch": "selectionsort_29",
        "recursesTo": {
          "meta": "selectionsort",
          "branch": "selectionsort_37",
          "path": [],
          "branchPath": "selectionsort_37"
        },
        "recursive": true,
        "typeHint": {}
      },
      "parent": "selectionsort_37"
    },
    {
      "v": "selectionsort_37:filter_30",
      "value": {
        "id": "filter",
        "inputPorts": {
          "list": "[int64]",
          "fn": {
            "type": "function",
            "arguments": {
              "y": "int64"
            },
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": "bool"
            },
            "return": "bool"
          }
        },
        "outputPorts": {
          "value": "[int64]"
        },
        "settings": {
          "argumentOrdering": [
            "list",
            "fn",
            "value"
          ],
          "genericType": {
            "value": "[int64]",
            "list": "[int64]"
          },
          "isGeneric": true
        },
        "implementation": {
          "nodes": [
            {
              "id": "fold",
              "inputPorts": {
                "list": "generic",
                "fn": "generic",
                "init": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "settings": {
                "argumentOrdering": [
                  "list",
                  "fn",
                  "init",
                  "value"
                ]
              },
              "implementation": {
                "nodes": [
                  {
                    "id": "logic/if",
                    "version": "0.2.0",
                    "inputPorts": {
                      "check": "bool",
                      "truePath": "generic",
                      "falsePath": "generic"
                    },
                    "outputPorts": {
                      "value": "generic"
                    },
                    "implementation": {
                      "nodes": [
                        {
                          "id": "logic/mux",
                          "inputPorts": {
                            "input1": "generic",
                            "input2": "generic",
                            "control": "bool"
                          },
                          "outputPorts": {
                            "output": "generic"
                          },
                          "atomic": true,
                          "version": "0.3.0",
                          "specialForm": true,
                          "settings": {
                            "argumentOrdering": [
                              "input1",
                              "input2",
                              "control",
                              "output"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "filter",
                              "branch": "filter_30",
                              "branchPath": "selectionsort_37:filter_30"
                            },
                            {
                              "meta": "fold",
                              "branch": "fold_7",
                              "branchPath": "selectionsort_37:filter_30:fold_7"
                            },
                            {
                              "meta": "logic/if",
                              "branch": "if_0",
                              "version": "0.2.0",
                              "branchPath": "selectionsort_37:filter_30:fold_7:if_0"
                            }
                          ],
                          "parent": "selectionsort_37:filter_30:fold_7:if_0",
                          "branchPath": "selectionsort_37:filter_30:fold_7:if_0:mux_0",
                          "branch": "mux_0",
                          "recursive": false
                        }
                      ],
                      "edges": [
                        {
                          "from": "truePath",
                          "to": "mux_0:input1"
                        },
                        {
                          "from": "falsePath",
                          "to": "mux_0:input2"
                        },
                        {
                          "from": "check",
                          "to": "mux_0:control"
                        },
                        {
                          "from": "mux_0:output",
                          "to": "value"
                        }
                      ]
                    },
                    "settings": {
                      "argumentOrdering": [
                        "check",
                        "truePath",
                        "falsePath",
                        "value"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "fold",
                        "branch": "fold_7",
                        "branchPath": "selectionsort_37:filter_30:fold_7"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30:fold_7",
                    "branchPath": "selectionsort_37:filter_30:fold_7:if_0",
                    "branch": "if_0",
                    "recursive": false
                  },
                  {
                    "id": "array/empty",
                    "version": "0.2.0",
                    "inputPorts": {
                      "array": "generic"
                    },
                    "outputPorts": {
                      "isEmpty": "bool"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "array",
                        "isEmpty"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "fold",
                        "branch": "fold_7",
                        "branchPath": "selectionsort_37:filter_30:fold_7"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30:fold_7",
                    "branchPath": "selectionsort_37:filter_30:fold_7:empty_1",
                    "branch": "empty_1",
                    "recursive": false
                  },
                  {
                    "id": "functional/apply",
                    "version": "0.3.0",
                    "inputPorts": {
                      "fn": "generic",
                      "value": "generic"
                    },
                    "outputPorts": {
                      "result": "generic"
                    },
                    "implementation": {
                      "nodes": [
                        {
                          "id": "functional/call",
                          "version": "0.2.0",
                          "inputPorts": {
                            "fn": "function"
                          },
                          "outputPorts": {
                            "result": "function:return"
                          },
                          "atomic": true,
                          "specialForm": true,
                          "settings": {
                            "argumentOrdering": [
                              "fn",
                              "result"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "filter",
                              "branch": "filter_30",
                              "branchPath": "selectionsort_37:filter_30"
                            },
                            {
                              "meta": "fold",
                              "branch": "fold_7",
                              "branchPath": "selectionsort_37:filter_30:fold_7"
                            },
                            {
                              "meta": "functional/apply",
                              "branch": "apply_2",
                              "version": "0.3.0",
                              "branchPath": "selectionsort_37:filter_30:fold_7:apply_2"
                            }
                          ],
                          "parent": "selectionsort_37:filter_30:fold_7:apply_2",
                          "branchPath": "selectionsort_37:filter_30:fold_7:apply_2:call_0",
                          "branch": "call_0",
                          "recursive": false
                        },
                        {
                          "id": "functional/partial",
                          "version": "0.2.1",
                          "inputPorts": {
                            "fn": "function",
                            "value": "function:arg"
                          },
                          "outputPorts": {
                            "result": "function:partial"
                          },
                          "atomic": true,
                          "specialForm": true,
                          "settings": {
                            "argumentOrdering": [
                              "fn",
                              "value",
                              "result"
                            ]
                          },
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "branchPath": "selectionsort_37"
                            },
                            {
                              "meta": "filter",
                              "branch": "filter_30",
                              "branchPath": "selectionsort_37:filter_30"
                            },
                            {
                              "meta": "fold",
                              "branch": "fold_7",
                              "branchPath": "selectionsort_37:filter_30:fold_7"
                            },
                            {
                              "meta": "functional/apply",
                              "branch": "apply_2",
                              "version": "0.3.0",
                              "branchPath": "selectionsort_37:filter_30:fold_7:apply_2"
                            }
                          ],
                          "params": {
                            "partial": 0
                          },
                          "parent": "selectionsort_37:filter_30:fold_7:apply_2",
                          "branchPath": "selectionsort_37:filter_30:fold_7:apply_2:partial_1",
                          "branch": "partial_1",
                          "recursive": false
                        }
                      ],
                      "edges": [
                        {
                          "from": "fn",
                          "to": "partial_1:fn"
                        },
                        {
                          "from": "value",
                          "to": "partial_1:value"
                        },
                        {
                          "from": "partial_1:result",
                          "to": "call_0:fn"
                        },
                        {
                          "from": "call_0:result",
                          "to": "result"
                        }
                      ]
                    },
                    "settings": {
                      "argumentOrdering": [
                        "fn",
                        "value",
                        "result"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "fold",
                        "branch": "fold_7",
                        "branchPath": "selectionsort_37:filter_30:fold_7"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30:fold_7",
                    "branchPath": "selectionsort_37:filter_30:fold_7:apply_2",
                    "branch": "apply_2",
                    "recursive": false
                  },
                  {
                    "id": "functional/partial",
                    "version": "0.2.1",
                    "inputPorts": {
                      "fn": "function",
                      "value": "function:arg"
                    },
                    "outputPorts": {
                      "result": "function:partial"
                    },
                    "atomic": true,
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "fn",
                        "value",
                        "result"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "fold",
                        "branch": "fold_7",
                        "branchPath": "selectionsort_37:filter_30:fold_7"
                      }
                    ],
                    "params": {
                      "partial": 1
                    },
                    "parent": "selectionsort_37:filter_30:fold_7",
                    "branchPath": "selectionsort_37:filter_30:fold_7:partial_3",
                    "branch": "partial_3",
                    "recursive": false
                  },
                  {
                    "id": "array/first",
                    "version": "0.2.0",
                    "inputPorts": {
                      "array": "[generic]"
                    },
                    "outputPorts": {
                      "value": "generic"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "array",
                        "value"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "fold",
                        "branch": "fold_7",
                        "branchPath": "selectionsort_37:filter_30:fold_7"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30:fold_7",
                    "branchPath": "selectionsort_37:filter_30:fold_7:first_4",
                    "branch": "first_4",
                    "recursive": false
                  },
                  {
                    "id": "fold",
                    "inputPorts": {
                      "list": "generic",
                      "fn": "generic",
                      "init": "generic"
                    },
                    "outputPorts": {
                      "value": "generic"
                    },
                    "settings": {
                      "argumentOrdering": [
                        "list",
                        "fn",
                        "init",
                        "value"
                      ]
                    },
                    "implementation": {
                      "nodes": [
                        {
                          "meta": "logic/if",
                          "name": "if_0"
                        },
                        {
                          "meta": "array/empty",
                          "name": "empty_1"
                        },
                        {
                          "meta": "functional/apply",
                          "name": "apply_2"
                        },
                        {
                          "meta": "functional/partial",
                          "name": "partial_3",
                          "params": {
                            "partial": 1
                          }
                        },
                        {
                          "meta": "array/first",
                          "name": "first_4"
                        },
                        {
                          "meta": "fold",
                          "name": "fold_5"
                        },
                        {
                          "meta": "array/rest",
                          "name": "rest_6"
                        }
                      ],
                      "edges": [
                        {
                          "from": "list",
                          "to": "empty_1:array"
                        },
                        {
                          "from": "empty_1:isEmpty",
                          "to": "if_0:check"
                        },
                        {
                          "from": "init",
                          "to": "if_0:truePath"
                        },
                        {
                          "from": "fn",
                          "to": "partial_3:fn"
                        },
                        {
                          "from": "list",
                          "to": "first_4:array"
                        },
                        {
                          "from": "first_4:value",
                          "to": "partial_3:value"
                        },
                        {
                          "from": "partial_3:result",
                          "to": "apply_2:fn"
                        },
                        {
                          "from": "list",
                          "to": "rest_6:array"
                        },
                        {
                          "from": "rest_6:rest",
                          "to": "fold_5:list"
                        },
                        {
                          "from": "fn",
                          "to": "fold_5:fn"
                        },
                        {
                          "from": "init",
                          "to": "fold_5:init"
                        },
                        {
                          "from": "fold_5:value",
                          "to": "apply_2:value"
                        },
                        {
                          "from": "apply_2:result",
                          "to": "if_0:falsePath"
                        },
                        {
                          "from": "if_0:value",
                          "to": "value"
                        }
                      ]
                    },
                    "name": "defco_fold",
                    "externalComponent": true,
                    "parent": "selectionsort_37:filter_30:fold_7",
                    "branchPath": "selectionsort_37:filter_30:fold_7:fold_5",
                    "branch": "fold_5",
                    "recursesTo": {
                      "meta": "fold",
                      "branch": "fold_7",
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "path": [],
                          "branchPath": "selectionsort_37"
                        },
                        {
                          "meta": "filter",
                          "branch": "filter_30",
                          "path": [
                            {
                              "meta": "selectionsort",
                              "branch": "selectionsort_37",
                              "path": [],
                              "branchPath": "selectionsort_37"
                            }
                          ],
                          "branchPath": "selectionsort_37:filter_30"
                        }
                      ],
                      "branchPath": "selectionsort_37:filter_30:fold_7"
                    },
                    "recursive": true
                  },
                  {
                    "id": "array/rest",
                    "version": "0.2.0",
                    "inputPorts": {
                      "array": "generic"
                    },
                    "outputPorts": {
                      "rest": "generic"
                    },
                    "atomic": true,
                    "settings": {
                      "argumentOrdering": [
                        "array",
                        "rest"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "fold",
                        "branch": "fold_7",
                        "branchPath": "selectionsort_37:filter_30:fold_7"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30:fold_7",
                    "branchPath": "selectionsort_37:filter_30:fold_7:rest_6",
                    "branch": "rest_6",
                    "recursive": false
                  }
                ],
                "edges": [
                  {
                    "from": "list",
                    "to": "empty_1:array"
                  },
                  {
                    "from": "empty_1:isEmpty",
                    "to": "if_0:check"
                  },
                  {
                    "from": "init",
                    "to": "if_0:truePath"
                  },
                  {
                    "from": "fn",
                    "to": "partial_3:fn"
                  },
                  {
                    "from": "list",
                    "to": "first_4:array"
                  },
                  {
                    "from": "first_4:value",
                    "to": "partial_3:value"
                  },
                  {
                    "from": "partial_3:result",
                    "to": "apply_2:fn"
                  },
                  {
                    "from": "list",
                    "to": "rest_6:array"
                  },
                  {
                    "from": "rest_6:rest",
                    "to": "fold_5:list"
                  },
                  {
                    "from": "fn",
                    "to": "fold_5:fn"
                  },
                  {
                    "from": "init",
                    "to": "fold_5:init"
                  },
                  {
                    "from": "fold_5:value",
                    "to": "apply_2:value"
                  },
                  {
                    "from": "apply_2:result",
                    "to": "if_0:falsePath"
                  },
                  {
                    "from": "if_0:value",
                    "to": "value"
                  }
                ]
              },
              "name": "defco_fold",
              "externalComponent": true,
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                }
              ],
              "parent": "selectionsort_37:filter_30",
              "branchPath": "selectionsort_37:filter_30:fold_7",
              "branch": "fold_7",
              "recursive": false
            },
            {
              "id": "functional/partial",
              "version": "0.2.1",
              "inputPorts": {
                "fn": "function",
                "value": "function:arg"
              },
              "outputPorts": {
                "result": "function:partial"
              },
              "atomic": true,
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "value",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                }
              ],
              "params": {
                "partial": 0
              },
              "parent": "selectionsort_37:filter_30",
              "branchPath": "selectionsort_37:filter_30:partial_8",
              "branch": "partial_8",
              "recursive": false
            },
            {
              "id": "functional/lambda",
              "version": "0.2.0",
              "inputPorts": {},
              "outputPorts": {
                "fn": "function"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "fn"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                }
              ],
              "params": {
                "implementation": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
              },
              "parent": "selectionsort_37:filter_30",
              "branchPath": "selectionsort_37:filter_30:lambda_9",
              "branch": "lambda_9",
              "isLambda": true,
              "data": {
                "outputPorts": {
                  "value_0": "generic"
                },
                "settings": {
                  "argumentOrdering": [
                    "fn",
                    "acc",
                    "cur",
                    "value_0"
                  ]
                },
                "inputPorts": {
                  "fn": "generic",
                  "acc": "generic",
                  "cur": "generic"
                },
                "implementation": {
                  "nodes": [
                    {
                      "id": "logic/if",
                      "version": "0.2.0",
                      "inputPorts": {
                        "check": "bool",
                        "truePath": "generic",
                        "falsePath": "generic"
                      },
                      "outputPorts": {
                        "value": "generic"
                      },
                      "implementation": {
                        "nodes": [
                          {
                            "id": "logic/mux",
                            "inputPorts": {
                              "input1": "generic",
                              "input2": "generic",
                              "control": "bool"
                            },
                            "outputPorts": {
                              "output": "generic"
                            },
                            "atomic": true,
                            "version": "0.3.0",
                            "specialForm": true,
                            "settings": {
                              "argumentOrdering": [
                                "input1",
                                "input2",
                                "control",
                                "output"
                              ]
                            },
                            "path": [
                              {
                                "meta": "selectionsort",
                                "branch": "selectionsort_37",
                                "branchPath": "selectionsort_37"
                              },
                              {
                                "meta": "filter",
                                "branch": "filter_30",
                                "branchPath": "selectionsort_37:filter_30"
                              },
                              {
                                "meta": "functional/lambda",
                                "branch": "lambda_9",
                                "version": "0.2.0",
                                "branchPath": "selectionsort_37:filter_30:lambda_9"
                              },
                              {
                                "meta": "lambda_9_impl",
                                "branch": "lambda_9_impl",
                                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                              },
                              {
                                "meta": "logic/if",
                                "branch": "if_10",
                                "version": "0.2.0",
                                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10"
                              }
                            ],
                            "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
                            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
                            "branch": "mux_0",
                            "recursive": false
                          }
                        ],
                        "edges": [
                          {
                            "from": "truePath",
                            "to": "mux_0:input1"
                          },
                          {
                            "from": "falsePath",
                            "to": "mux_0:input2"
                          },
                          {
                            "from": "check",
                            "to": "mux_0:control"
                          },
                          {
                            "from": "mux_0:output",
                            "to": "value"
                          }
                        ]
                      },
                      "settings": {
                        "argumentOrdering": [
                          "check",
                          "truePath",
                          "falsePath",
                          "value"
                        ]
                      },
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "branchPath": "selectionsort_37"
                        },
                        {
                          "meta": "filter",
                          "branch": "filter_30",
                          "branchPath": "selectionsort_37:filter_30"
                        },
                        {
                          "meta": "functional/lambda",
                          "branch": "lambda_9",
                          "version": "0.2.0",
                          "branchPath": "selectionsort_37:filter_30:lambda_9"
                        },
                        {
                          "meta": "lambda_9_impl",
                          "branch": "lambda_9_impl",
                          "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                        }
                      ],
                      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
                      "branch": "if_10",
                      "recursive": false
                    },
                    {
                      "id": "functional/apply",
                      "version": "0.3.0",
                      "inputPorts": {
                        "fn": "generic",
                        "value": "generic"
                      },
                      "outputPorts": {
                        "result": "generic"
                      },
                      "implementation": {
                        "nodes": [
                          {
                            "id": "functional/call",
                            "version": "0.2.0",
                            "inputPorts": {
                              "fn": "function"
                            },
                            "outputPorts": {
                              "result": "function:return"
                            },
                            "atomic": true,
                            "specialForm": true,
                            "settings": {
                              "argumentOrdering": [
                                "fn",
                                "result"
                              ]
                            },
                            "path": [
                              {
                                "meta": "selectionsort",
                                "branch": "selectionsort_37",
                                "branchPath": "selectionsort_37"
                              },
                              {
                                "meta": "filter",
                                "branch": "filter_30",
                                "branchPath": "selectionsort_37:filter_30"
                              },
                              {
                                "meta": "functional/lambda",
                                "branch": "lambda_9",
                                "version": "0.2.0",
                                "branchPath": "selectionsort_37:filter_30:lambda_9"
                              },
                              {
                                "meta": "lambda_9_impl",
                                "branch": "lambda_9_impl",
                                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                              },
                              {
                                "meta": "functional/apply",
                                "branch": "apply_11",
                                "version": "0.3.0",
                                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
                              }
                            ],
                            "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0",
                            "branch": "call_0",
                            "recursive": false
                          },
                          {
                            "id": "functional/partial",
                            "version": "0.2.1",
                            "inputPorts": {
                              "fn": "function",
                              "value": "function:arg"
                            },
                            "outputPorts": {
                              "result": "function:partial"
                            },
                            "atomic": true,
                            "specialForm": true,
                            "settings": {
                              "argumentOrdering": [
                                "fn",
                                "value",
                                "result"
                              ]
                            },
                            "path": [
                              {
                                "meta": "selectionsort",
                                "branch": "selectionsort_37",
                                "branchPath": "selectionsort_37"
                              },
                              {
                                "meta": "filter",
                                "branch": "filter_30",
                                "branchPath": "selectionsort_37:filter_30"
                              },
                              {
                                "meta": "functional/lambda",
                                "branch": "lambda_9",
                                "version": "0.2.0",
                                "branchPath": "selectionsort_37:filter_30:lambda_9"
                              },
                              {
                                "meta": "lambda_9_impl",
                                "branch": "lambda_9_impl",
                                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                              },
                              {
                                "meta": "functional/apply",
                                "branch": "apply_11",
                                "version": "0.3.0",
                                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
                              }
                            ],
                            "params": {
                              "partial": 0
                            },
                            "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1",
                            "branch": "partial_1",
                            "recursive": false
                          }
                        ],
                        "edges": [
                          {
                            "from": "fn",
                            "to": "partial_1:fn"
                          },
                          {
                            "from": "value",
                            "to": "partial_1:value"
                          },
                          {
                            "from": "partial_1:result",
                            "to": "call_0:fn"
                          },
                          {
                            "from": "call_0:result",
                            "to": "result"
                          }
                        ]
                      },
                      "settings": {
                        "argumentOrdering": [
                          "fn",
                          "value",
                          "result"
                        ]
                      },
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "branchPath": "selectionsort_37"
                        },
                        {
                          "meta": "filter",
                          "branch": "filter_30",
                          "branchPath": "selectionsort_37:filter_30"
                        },
                        {
                          "meta": "functional/lambda",
                          "branch": "lambda_9",
                          "version": "0.2.0",
                          "branchPath": "selectionsort_37:filter_30:lambda_9"
                        },
                        {
                          "meta": "lambda_9_impl",
                          "branch": "lambda_9_impl",
                          "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                        }
                      ],
                      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                      "branch": "apply_11",
                      "recursive": false
                    },
                    {
                      "id": "array/prepend",
                      "version": "0.2.3",
                      "inputPorts": {
                        "array": "[generic]",
                        "value": "generic"
                      },
                      "outputPorts": {
                        "result": "[generic]"
                      },
                      "atomic": true,
                      "settings": {
                        "argumentOrdering": [
                          "array",
                          "value",
                          "result"
                        ]
                      },
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "branchPath": "selectionsort_37"
                        },
                        {
                          "meta": "filter",
                          "branch": "filter_30",
                          "branchPath": "selectionsort_37:filter_30"
                        },
                        {
                          "meta": "functional/lambda",
                          "branch": "lambda_9",
                          "version": "0.2.0",
                          "branchPath": "selectionsort_37:filter_30:lambda_9"
                        },
                        {
                          "meta": "lambda_9_impl",
                          "branch": "lambda_9_impl",
                          "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                        }
                      ],
                      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12",
                      "branch": "prepend_12",
                      "recursive": false
                    }
                  ],
                  "edges": [
                    {
                      "from": "fn",
                      "to": "apply_11:fn"
                    },
                    {
                      "from": "cur",
                      "to": "apply_11:value"
                    },
                    {
                      "from": "apply_11:result",
                      "to": "if_10:check"
                    },
                    {
                      "from": "acc",
                      "to": "prepend_12:array"
                    },
                    {
                      "from": "cur",
                      "to": "prepend_12:value"
                    },
                    {
                      "from": "prepend_12:result",
                      "to": "if_10:truePath"
                    },
                    {
                      "from": "acc",
                      "to": "if_10:falsePath"
                    },
                    {
                      "from": "if_10:value",
                      "to": "value_0"
                    }
                  ]
                },
                "id": "lambda_9_impl",
                "externalComponent": true,
                "path": [
                  {
                    "meta": "selectionsort",
                    "branch": "selectionsort_37",
                    "branchPath": "selectionsort_37"
                  },
                  {
                    "meta": "filter",
                    "branch": "filter_30",
                    "branchPath": "selectionsort_37:filter_30"
                  },
                  {
                    "meta": "functional/lambda",
                    "branch": "lambda_9",
                    "version": "0.2.0",
                    "branchPath": "selectionsort_37:filter_30:lambda_9"
                  }
                ],
                "parent": "selectionsort_37:filter_30:lambda_9",
                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                "branch": "lambda_9_impl",
                "recursive": false
              },
              "recursive": false
            },
            {
              "id": "array/emptyArray",
              "inputPorts": {},
              "outputPorts": {
                "output": "generic"
              },
              "atomic": true,
              "version": "0.2.1",
              "settings": {
                "argumentOrdering": [
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                }
              ],
              "parent": "selectionsort_37:filter_30",
              "branchPath": "selectionsort_37:filter_30:array/emptyArray_13",
              "branch": "array/emptyArray_13",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "list",
              "to": "fold_7:list"
            },
            {
              "from": "lambda_9:fn",
              "to": "partial_8:fn"
            },
            {
              "from": "fn",
              "to": "partial_8:value"
            },
            {
              "from": "partial_8:result",
              "to": "fold_7:fn"
            },
            {
              "from": "array/emptyArray_13:output",
              "to": "fold_7:init"
            },
            {
              "from": "fold_7:value",
              "to": "value"
            }
          ]
        },
        "name": "defco_filter",
        "externalComponent": true,
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          }
        ],
        "parent": "selectionsort_37",
        "branchPath": "selectionsort_37:filter_30",
        "branch": "filter_30",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7",
      "value": {
        "id": "fold",
        "inputPorts": {
          "list": "[int64]",
          "fn": {
            "type": "function",
            "arguments": {
              "acc": "[int64]",
              "cur": "int64"
            },
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          },
          "init": "[int64]"
        },
        "outputPorts": {
          "value": "[int64]"
        },
        "settings": {
          "argumentOrdering": [
            "list",
            "fn",
            "init",
            "value"
          ],
          "genericType": {
            "list": "[int64]",
            "value": "[int64]",
            "init": "[int64]"
          },
          "isGeneric": true
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/if",
              "version": "0.2.0",
              "inputPorts": {
                "check": "bool",
                "truePath": "generic",
                "falsePath": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "implementation": {
                "nodes": [
                  {
                    "id": "logic/mux",
                    "inputPorts": {
                      "input1": "generic",
                      "input2": "generic",
                      "control": "bool"
                    },
                    "outputPorts": {
                      "output": "generic"
                    },
                    "atomic": true,
                    "version": "0.3.0",
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "input1",
                        "input2",
                        "control",
                        "output"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "fold",
                        "branch": "fold_7",
                        "branchPath": "selectionsort_37:filter_30:fold_7"
                      },
                      {
                        "meta": "logic/if",
                        "branch": "if_0",
                        "version": "0.2.0",
                        "branchPath": "selectionsort_37:filter_30:fold_7:if_0"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30:fold_7:if_0",
                    "branchPath": "selectionsort_37:filter_30:fold_7:if_0:mux_0",
                    "branch": "mux_0",
                    "recursive": false
                  }
                ],
                "edges": [
                  {
                    "from": "truePath",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "falsePath",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "check",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "value"
                  }
                ]
              },
              "settings": {
                "argumentOrdering": [
                  "check",
                  "truePath",
                  "falsePath",
                  "value"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "fold",
                  "branch": "fold_7",
                  "branchPath": "selectionsort_37:filter_30:fold_7"
                }
              ],
              "parent": "selectionsort_37:filter_30:fold_7",
              "branchPath": "selectionsort_37:filter_30:fold_7:if_0",
              "branch": "if_0",
              "recursive": false
            },
            {
              "id": "array/empty",
              "version": "0.2.0",
              "inputPorts": {
                "array": "generic"
              },
              "outputPorts": {
                "isEmpty": "bool"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "isEmpty"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "fold",
                  "branch": "fold_7",
                  "branchPath": "selectionsort_37:filter_30:fold_7"
                }
              ],
              "parent": "selectionsort_37:filter_30:fold_7",
              "branchPath": "selectionsort_37:filter_30:fold_7:empty_1",
              "branch": "empty_1",
              "recursive": false
            },
            {
              "id": "functional/apply",
              "version": "0.3.0",
              "inputPorts": {
                "fn": "generic",
                "value": "generic"
              },
              "outputPorts": {
                "result": "generic"
              },
              "implementation": {
                "nodes": [
                  {
                    "id": "functional/call",
                    "version": "0.2.0",
                    "inputPorts": {
                      "fn": "function"
                    },
                    "outputPorts": {
                      "result": "function:return"
                    },
                    "atomic": true,
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "fn",
                        "result"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "fold",
                        "branch": "fold_7",
                        "branchPath": "selectionsort_37:filter_30:fold_7"
                      },
                      {
                        "meta": "functional/apply",
                        "branch": "apply_2",
                        "version": "0.3.0",
                        "branchPath": "selectionsort_37:filter_30:fold_7:apply_2"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30:fold_7:apply_2",
                    "branchPath": "selectionsort_37:filter_30:fold_7:apply_2:call_0",
                    "branch": "call_0",
                    "recursive": false
                  },
                  {
                    "id": "functional/partial",
                    "version": "0.2.1",
                    "inputPorts": {
                      "fn": "function",
                      "value": "function:arg"
                    },
                    "outputPorts": {
                      "result": "function:partial"
                    },
                    "atomic": true,
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "fn",
                        "value",
                        "result"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "fold",
                        "branch": "fold_7",
                        "branchPath": "selectionsort_37:filter_30:fold_7"
                      },
                      {
                        "meta": "functional/apply",
                        "branch": "apply_2",
                        "version": "0.3.0",
                        "branchPath": "selectionsort_37:filter_30:fold_7:apply_2"
                      }
                    ],
                    "params": {
                      "partial": 0
                    },
                    "parent": "selectionsort_37:filter_30:fold_7:apply_2",
                    "branchPath": "selectionsort_37:filter_30:fold_7:apply_2:partial_1",
                    "branch": "partial_1",
                    "recursive": false
                  }
                ],
                "edges": [
                  {
                    "from": "fn",
                    "to": "partial_1:fn"
                  },
                  {
                    "from": "value",
                    "to": "partial_1:value"
                  },
                  {
                    "from": "partial_1:result",
                    "to": "call_0:fn"
                  },
                  {
                    "from": "call_0:result",
                    "to": "result"
                  }
                ]
              },
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "value",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "fold",
                  "branch": "fold_7",
                  "branchPath": "selectionsort_37:filter_30:fold_7"
                }
              ],
              "parent": "selectionsort_37:filter_30:fold_7",
              "branchPath": "selectionsort_37:filter_30:fold_7:apply_2",
              "branch": "apply_2",
              "recursive": false
            },
            {
              "id": "functional/partial",
              "version": "0.2.1",
              "inputPorts": {
                "fn": "function",
                "value": "function:arg"
              },
              "outputPorts": {
                "result": "function:partial"
              },
              "atomic": true,
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "value",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "fold",
                  "branch": "fold_7",
                  "branchPath": "selectionsort_37:filter_30:fold_7"
                }
              ],
              "params": {
                "partial": 1
              },
              "parent": "selectionsort_37:filter_30:fold_7",
              "branchPath": "selectionsort_37:filter_30:fold_7:partial_3",
              "branch": "partial_3",
              "recursive": false
            },
            {
              "id": "array/first",
              "version": "0.2.0",
              "inputPorts": {
                "array": "[generic]"
              },
              "outputPorts": {
                "value": "generic"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "value"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "fold",
                  "branch": "fold_7",
                  "branchPath": "selectionsort_37:filter_30:fold_7"
                }
              ],
              "parent": "selectionsort_37:filter_30:fold_7",
              "branchPath": "selectionsort_37:filter_30:fold_7:first_4",
              "branch": "first_4",
              "recursive": false
            },
            {
              "id": "fold",
              "inputPorts": {
                "list": "generic",
                "fn": "generic",
                "init": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "settings": {
                "argumentOrdering": [
                  "list",
                  "fn",
                  "init",
                  "value"
                ]
              },
              "implementation": {
                "nodes": [
                  {
                    "meta": "logic/if",
                    "name": "if_0"
                  },
                  {
                    "meta": "array/empty",
                    "name": "empty_1"
                  },
                  {
                    "meta": "functional/apply",
                    "name": "apply_2"
                  },
                  {
                    "meta": "functional/partial",
                    "name": "partial_3",
                    "params": {
                      "partial": 1
                    }
                  },
                  {
                    "meta": "array/first",
                    "name": "first_4"
                  },
                  {
                    "meta": "fold",
                    "name": "fold_5"
                  },
                  {
                    "meta": "array/rest",
                    "name": "rest_6"
                  }
                ],
                "edges": [
                  {
                    "from": "list",
                    "to": "empty_1:array"
                  },
                  {
                    "from": "empty_1:isEmpty",
                    "to": "if_0:check"
                  },
                  {
                    "from": "init",
                    "to": "if_0:truePath"
                  },
                  {
                    "from": "fn",
                    "to": "partial_3:fn"
                  },
                  {
                    "from": "list",
                    "to": "first_4:array"
                  },
                  {
                    "from": "first_4:value",
                    "to": "partial_3:value"
                  },
                  {
                    "from": "partial_3:result",
                    "to": "apply_2:fn"
                  },
                  {
                    "from": "list",
                    "to": "rest_6:array"
                  },
                  {
                    "from": "rest_6:rest",
                    "to": "fold_5:list"
                  },
                  {
                    "from": "fn",
                    "to": "fold_5:fn"
                  },
                  {
                    "from": "init",
                    "to": "fold_5:init"
                  },
                  {
                    "from": "fold_5:value",
                    "to": "apply_2:value"
                  },
                  {
                    "from": "apply_2:result",
                    "to": "if_0:falsePath"
                  },
                  {
                    "from": "if_0:value",
                    "to": "value"
                  }
                ]
              },
              "name": "defco_fold",
              "externalComponent": true,
              "parent": "selectionsort_37:filter_30:fold_7",
              "branchPath": "selectionsort_37:filter_30:fold_7:fold_5",
              "branch": "fold_5",
              "recursesTo": {
                "meta": "fold",
                "branch": "fold_7",
                "path": [
                  {
                    "meta": "selectionsort",
                    "branch": "selectionsort_37",
                    "path": [],
                    "branchPath": "selectionsort_37"
                  },
                  {
                    "meta": "filter",
                    "branch": "filter_30",
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "path": [],
                        "branchPath": "selectionsort_37"
                      }
                    ],
                    "branchPath": "selectionsort_37:filter_30"
                  }
                ],
                "branchPath": "selectionsort_37:filter_30:fold_7"
              },
              "recursive": true
            },
            {
              "id": "array/rest",
              "version": "0.2.0",
              "inputPorts": {
                "array": "generic"
              },
              "outputPorts": {
                "rest": "generic"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "rest"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "fold",
                  "branch": "fold_7",
                  "branchPath": "selectionsort_37:filter_30:fold_7"
                }
              ],
              "parent": "selectionsort_37:filter_30:fold_7",
              "branchPath": "selectionsort_37:filter_30:fold_7:rest_6",
              "branch": "rest_6",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "list",
              "to": "empty_1:array"
            },
            {
              "from": "empty_1:isEmpty",
              "to": "if_0:check"
            },
            {
              "from": "init",
              "to": "if_0:truePath"
            },
            {
              "from": "fn",
              "to": "partial_3:fn"
            },
            {
              "from": "list",
              "to": "first_4:array"
            },
            {
              "from": "first_4:value",
              "to": "partial_3:value"
            },
            {
              "from": "partial_3:result",
              "to": "apply_2:fn"
            },
            {
              "from": "list",
              "to": "rest_6:array"
            },
            {
              "from": "rest_6:rest",
              "to": "fold_5:list"
            },
            {
              "from": "fn",
              "to": "fold_5:fn"
            },
            {
              "from": "init",
              "to": "fold_5:init"
            },
            {
              "from": "fold_5:value",
              "to": "apply_2:value"
            },
            {
              "from": "apply_2:result",
              "to": "if_0:falsePath"
            },
            {
              "from": "if_0:value",
              "to": "value"
            }
          ]
        },
        "name": "defco_fold",
        "externalComponent": true,
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          }
        ],
        "parent": "selectionsort_37:filter_30",
        "branchPath": "selectionsort_37:filter_30:fold_7",
        "branch": "fold_7",
        "recursive": false,
        "recursiveRoot": true,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:if_0",
      "value": {
        "id": "logic/if",
        "version": "0.2.0",
        "inputPorts": {
          "check": "bool",
          "truePath": "[int64]",
          "falsePath": "[int64]"
        },
        "outputPorts": {
          "value": "[int64]"
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/mux",
              "inputPorts": {
                "input1": "generic",
                "input2": "generic",
                "control": "bool"
              },
              "outputPorts": {
                "output": "generic"
              },
              "atomic": true,
              "version": "0.3.0",
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "input1",
                  "input2",
                  "control",
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "fold",
                  "branch": "fold_7",
                  "branchPath": "selectionsort_37:filter_30:fold_7"
                },
                {
                  "meta": "logic/if",
                  "branch": "if_0",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:filter_30:fold_7:if_0"
                }
              ],
              "parent": "selectionsort_37:filter_30:fold_7:if_0",
              "branchPath": "selectionsort_37:filter_30:fold_7:if_0:mux_0",
              "branch": "mux_0",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "truePath",
              "to": "mux_0:input1"
            },
            {
              "from": "falsePath",
              "to": "mux_0:input2"
            },
            {
              "from": "check",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "value"
            }
          ]
        },
        "settings": {
          "argumentOrdering": [
            "check",
            "truePath",
            "falsePath",
            "value"
          ],
          "genericType": {
            "value": "[int64]",
            "truePath": "[int64]",
            "falsePath": "[int64]"
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "fold",
            "branch": "fold_7",
            "branchPath": "selectionsort_37:filter_30:fold_7"
          }
        ],
        "parent": "selectionsort_37:filter_30:fold_7",
        "branchPath": "selectionsort_37:filter_30:fold_7:if_0",
        "branch": "if_0",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:fold_7"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:if_0:mux_0",
      "value": {
        "id": "logic/mux",
        "inputPorts": {
          "input1": "[int64]",
          "input2": "[int64]",
          "control": "bool"
        },
        "outputPorts": {
          "output": "[int64]"
        },
        "atomic": true,
        "version": "0.3.0",
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "input1",
            "input2",
            "control",
            "output"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "fold",
            "branch": "fold_7",
            "branchPath": "selectionsort_37:filter_30:fold_7"
          },
          {
            "meta": "logic/if",
            "branch": "if_0",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:filter_30:fold_7:if_0"
          }
        ],
        "parent": "selectionsort_37:filter_30:fold_7:if_0",
        "branchPath": "selectionsort_37:filter_30:fold_7:if_0:mux_0",
        "branch": "mux_0",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:fold_7:if_0"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:empty_1",
      "value": {
        "id": "array/empty",
        "version": "0.2.0",
        "inputPorts": {
          "array": "[int64]"
        },
        "outputPorts": {
          "isEmpty": "bool"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "isEmpty"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "fold",
            "branch": "fold_7",
            "branchPath": "selectionsort_37:filter_30:fold_7"
          }
        ],
        "parent": "selectionsort_37:filter_30:fold_7",
        "branchPath": "selectionsort_37:filter_30:fold_7:empty_1",
        "branch": "empty_1",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:fold_7"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:apply_2",
      "value": {
        "id": "functional/apply",
        "version": "0.3.0",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "acc": "[int64]"
            },
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          },
          "value": "[int64]"
        },
        "outputPorts": {
          "result": "[int64]"
        },
        "implementation": {
          "nodes": [
            {
              "id": "functional/call",
              "version": "0.2.0",
              "inputPorts": {
                "fn": "function"
              },
              "outputPorts": {
                "result": "function:return"
              },
              "atomic": true,
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "fold",
                  "branch": "fold_7",
                  "branchPath": "selectionsort_37:filter_30:fold_7"
                },
                {
                  "meta": "functional/apply",
                  "branch": "apply_2",
                  "version": "0.3.0",
                  "branchPath": "selectionsort_37:filter_30:fold_7:apply_2"
                }
              ],
              "parent": "selectionsort_37:filter_30:fold_7:apply_2",
              "branchPath": "selectionsort_37:filter_30:fold_7:apply_2:call_0",
              "branch": "call_0",
              "recursive": false
            },
            {
              "id": "functional/partial",
              "version": "0.2.1",
              "inputPorts": {
                "fn": "function",
                "value": "function:arg"
              },
              "outputPorts": {
                "result": "function:partial"
              },
              "atomic": true,
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "value",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "fold",
                  "branch": "fold_7",
                  "branchPath": "selectionsort_37:filter_30:fold_7"
                },
                {
                  "meta": "functional/apply",
                  "branch": "apply_2",
                  "version": "0.3.0",
                  "branchPath": "selectionsort_37:filter_30:fold_7:apply_2"
                }
              ],
              "params": {
                "partial": 0
              },
              "parent": "selectionsort_37:filter_30:fold_7:apply_2",
              "branchPath": "selectionsort_37:filter_30:fold_7:apply_2:partial_1",
              "branch": "partial_1",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "fn",
              "to": "partial_1:fn"
            },
            {
              "from": "value",
              "to": "partial_1:value"
            },
            {
              "from": "partial_1:result",
              "to": "call_0:fn"
            },
            {
              "from": "call_0:result",
              "to": "result"
            }
          ]
        },
        "settings": {
          "argumentOrdering": [
            "fn",
            "value",
            "result"
          ],
          "genericType": {
            "value": "[int64]",
            "result": "[int64]"
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "fold",
            "branch": "fold_7",
            "branchPath": "selectionsort_37:filter_30:fold_7"
          }
        ],
        "parent": "selectionsort_37:filter_30:fold_7",
        "branchPath": "selectionsort_37:filter_30:fold_7:apply_2",
        "branch": "apply_2",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:fold_7"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:apply_2:call_0",
      "value": {
        "id": "functional/call",
        "version": "0.2.0",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {},
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          }
        },
        "outputPorts": {
          "result": "[int64]"
        },
        "atomic": true,
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "fn",
            "result"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "fold",
            "branch": "fold_7",
            "branchPath": "selectionsort_37:filter_30:fold_7"
          },
          {
            "meta": "functional/apply",
            "branch": "apply_2",
            "version": "0.3.0",
            "branchPath": "selectionsort_37:filter_30:fold_7:apply_2"
          }
        ],
        "parent": "selectionsort_37:filter_30:fold_7:apply_2",
        "branchPath": "selectionsort_37:filter_30:fold_7:apply_2:call_0",
        "branch": "call_0",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:fold_7:apply_2"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:apply_2:partial_1",
      "value": {
        "id": "functional/partial",
        "version": "0.2.1",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "acc": "[int64]"
            },
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          },
          "value": "[int64]"
        },
        "outputPorts": {
          "result": {
            "type": "function",
            "arguments": {},
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          }
        },
        "atomic": true,
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "fn",
            "value",
            "result"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "fold",
            "branch": "fold_7",
            "branchPath": "selectionsort_37:filter_30:fold_7"
          },
          {
            "meta": "functional/apply",
            "branch": "apply_2",
            "version": "0.3.0",
            "branchPath": "selectionsort_37:filter_30:fold_7:apply_2"
          }
        ],
        "params": {
          "partial": 0
        },
        "parent": "selectionsort_37:filter_30:fold_7:apply_2",
        "branchPath": "selectionsort_37:filter_30:fold_7:apply_2:partial_1",
        "branch": "partial_1",
        "recursive": false,
        "typeHint": {},
        "partial": {
          "partial": "selectionsort_37:filter_30:fold_7:apply_2:partial_1",
          "port": "acc",
          "portIndex": 0,
          "lambda": null
        }
      },
      "parent": "selectionsort_37:filter_30:fold_7:apply_2"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:partial_3",
      "value": {
        "id": "functional/partial",
        "version": "0.2.1",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "acc": "[int64]",
              "cur": "int64"
            },
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          },
          "value": "int64"
        },
        "outputPorts": {
          "result": {
            "type": "function",
            "arguments": {
              "acc": "[int64]"
            },
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          }
        },
        "atomic": true,
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "fn",
            "value",
            "result"
          ],
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "fold",
            "branch": "fold_7",
            "branchPath": "selectionsort_37:filter_30:fold_7"
          }
        ],
        "params": {
          "partial": 1
        },
        "parent": "selectionsort_37:filter_30:fold_7",
        "branchPath": "selectionsort_37:filter_30:fold_7:partial_3",
        "branch": "partial_3",
        "recursive": false,
        "typeHint": {},
        "partial": {
          "partial": "selectionsort_37:filter_30:fold_7:partial_3",
          "port": "cur",
          "portIndex": 1,
          "lambda": null
        }
      },
      "parent": "selectionsort_37:filter_30:fold_7"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:first_4",
      "value": {
        "id": "array/first",
        "version": "0.2.0",
        "inputPorts": {
          "array": "[int64]"
        },
        "outputPorts": {
          "value": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "value"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "fold",
            "branch": "fold_7",
            "branchPath": "selectionsort_37:filter_30:fold_7"
          }
        ],
        "parent": "selectionsort_37:filter_30:fold_7",
        "branchPath": "selectionsort_37:filter_30:fold_7:first_4",
        "branch": "first_4",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:fold_7"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:fold_5",
      "value": {
        "id": "fold",
        "inputPorts": {
          "list": "[int64]",
          "fn": {
            "type": "function",
            "arguments": {
              "acc": "[int64]",
              "cur": "int64"
            },
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          },
          "init": "[int64]"
        },
        "outputPorts": {
          "value": "[int64]"
        },
        "settings": {
          "argumentOrdering": [
            "list",
            "fn",
            "init",
            "value"
          ],
          "isGeneric": true
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/if",
              "name": "if_0"
            },
            {
              "meta": "array/empty",
              "name": "empty_1"
            },
            {
              "meta": "functional/apply",
              "name": "apply_2"
            },
            {
              "meta": "functional/partial",
              "name": "partial_3",
              "params": {
                "partial": 1
              }
            },
            {
              "meta": "array/first",
              "name": "first_4"
            },
            {
              "meta": "fold",
              "name": "fold_5"
            },
            {
              "meta": "array/rest",
              "name": "rest_6"
            }
          ],
          "edges": [
            {
              "from": "list",
              "to": "empty_1:array"
            },
            {
              "from": "empty_1:isEmpty",
              "to": "if_0:check"
            },
            {
              "from": "init",
              "to": "if_0:truePath"
            },
            {
              "from": "fn",
              "to": "partial_3:fn"
            },
            {
              "from": "list",
              "to": "first_4:array"
            },
            {
              "from": "first_4:value",
              "to": "partial_3:value"
            },
            {
              "from": "partial_3:result",
              "to": "apply_2:fn"
            },
            {
              "from": "list",
              "to": "rest_6:array"
            },
            {
              "from": "rest_6:rest",
              "to": "fold_5:list"
            },
            {
              "from": "fn",
              "to": "fold_5:fn"
            },
            {
              "from": "init",
              "to": "fold_5:init"
            },
            {
              "from": "fold_5:value",
              "to": "apply_2:value"
            },
            {
              "from": "apply_2:result",
              "to": "if_0:falsePath"
            },
            {
              "from": "if_0:value",
              "to": "value"
            }
          ]
        },
        "name": "defco_fold",
        "externalComponent": true,
        "parent": "selectionsort_37:filter_30:fold_7",
        "branchPath": "selectionsort_37:filter_30:fold_7:fold_5",
        "branch": "fold_5",
        "recursesTo": {
          "meta": "fold",
          "branch": "fold_7",
          "path": [
            {
              "meta": "selectionsort",
              "branch": "selectionsort_37",
              "path": [],
              "branchPath": "selectionsort_37"
            },
            {
              "meta": "filter",
              "branch": "filter_30",
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "path": [],
                  "branchPath": "selectionsort_37"
                }
              ],
              "branchPath": "selectionsort_37:filter_30"
            }
          ],
          "branchPath": "selectionsort_37:filter_30:fold_7"
        },
        "recursive": true,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:fold_7"
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:rest_6",
      "value": {
        "id": "array/rest",
        "version": "0.2.0",
        "inputPorts": {
          "array": "[int64]"
        },
        "outputPorts": {
          "rest": "[int64]"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "rest"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "fold",
            "branch": "fold_7",
            "branchPath": "selectionsort_37:filter_30:fold_7"
          }
        ],
        "parent": "selectionsort_37:filter_30:fold_7",
        "branchPath": "selectionsort_37:filter_30:fold_7:rest_6",
        "branch": "rest_6",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:fold_7"
    },
    {
      "v": "selectionsort_37:filter_30:partial_8",
      "value": {
        "id": "functional/partial",
        "version": "0.2.1",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "fn": {
                "type": "function",
                "arguments": {
                  "y": "int64"
                },
                "argumentOrdering": [
                  "x",
                  "y",
                  "value_0"
                ],
                "outputs": {
                  "value_0": "bool"
                },
                "return": "bool"
              },
              "acc": "[int64]",
              "cur": "int64"
            },
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          },
          "value": {
            "type": "function",
            "arguments": {
              "y": "int64"
            },
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": "bool"
            },
            "return": "bool"
          }
        },
        "outputPorts": {
          "result": {
            "type": "function",
            "arguments": {
              "acc": "[int64]",
              "cur": "int64"
            },
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          }
        },
        "atomic": true,
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "fn",
            "value",
            "result"
          ],
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          }
        ],
        "params": {
          "partial": 0
        },
        "parent": "selectionsort_37:filter_30",
        "branchPath": "selectionsort_37:filter_30:partial_8",
        "branch": "partial_8",
        "recursive": false,
        "typeHint": {},
        "partial": {
          "partial": "selectionsort_37:filter_30:partial_8",
          "port": "fn",
          "portIndex": 0,
          "lambda": {
            "type": "function",
            "arguments": {
              "y": {
                "type": "type-ref",
                "node": "selectionsort_37:lambda_32:lambda_32_impl",
                "port": "y"
              }
            },
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": {
                "type": "type-ref",
                "node": "selectionsort_37:lambda_32:lambda_32_impl",
                "port": "value_0"
              }
            },
            "return": {
              "type": "type-ref",
              "node": "selectionsort_37:lambda_32:lambda_32_impl",
              "port": "value_0"
            }
          },
          "applyTo": {
            "node": "selectionsort_37:filter_30:lambda_9",
            "port": "fn",
            "edge": {
              "from": "selectionsort_37:filter_30:lambda_9",
              "to": "selectionsort_37:filter_30:partial_8",
              "outPort": "fn",
              "inPort": "fn"
            }
          }
        }
      },
      "parent": "selectionsort_37:filter_30"
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9",
      "value": {
        "id": "functional/lambda",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "fn": {
                "type": "function",
                "arguments": {
                  "y": "int64"
                },
                "argumentOrdering": [
                  "x",
                  "y",
                  "value_0"
                ],
                "outputs": {
                  "value_0": "bool"
                },
                "return": "bool"
              },
              "acc": "[int64]",
              "cur": "int64"
            },
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ],
            "outputs": {
              "value_0": "[int64]"
            },
            "return": "[int64]"
          }
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "fn"
          ],
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          }
        ],
        "params": {
          "implementation": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
        },
        "parent": "selectionsort_37:filter_30",
        "branchPath": "selectionsort_37:filter_30:lambda_9",
        "branch": "lambda_9",
        "isLambda": true,
        "data": {
          "outputPorts": {
            "value_0": "generic"
          },
          "settings": {
            "argumentOrdering": [
              "fn",
              "acc",
              "cur",
              "value_0"
            ]
          },
          "inputPorts": {
            "fn": "generic",
            "acc": "generic",
            "cur": "generic"
          },
          "implementation": {
            "nodes": [
              {
                "id": "logic/if",
                "version": "0.2.0",
                "inputPorts": {
                  "check": "bool",
                  "truePath": "generic",
                  "falsePath": "generic"
                },
                "outputPorts": {
                  "value": "generic"
                },
                "implementation": {
                  "nodes": [
                    {
                      "id": "logic/mux",
                      "inputPorts": {
                        "input1": "generic",
                        "input2": "generic",
                        "control": "bool"
                      },
                      "outputPorts": {
                        "output": "generic"
                      },
                      "atomic": true,
                      "version": "0.3.0",
                      "specialForm": true,
                      "settings": {
                        "argumentOrdering": [
                          "input1",
                          "input2",
                          "control",
                          "output"
                        ]
                      },
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "branchPath": "selectionsort_37"
                        },
                        {
                          "meta": "filter",
                          "branch": "filter_30",
                          "branchPath": "selectionsort_37:filter_30"
                        },
                        {
                          "meta": "functional/lambda",
                          "branch": "lambda_9",
                          "version": "0.2.0",
                          "branchPath": "selectionsort_37:filter_30:lambda_9"
                        },
                        {
                          "meta": "lambda_9_impl",
                          "branch": "lambda_9_impl",
                          "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                        },
                        {
                          "meta": "logic/if",
                          "branch": "if_10",
                          "version": "0.2.0",
                          "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10"
                        }
                      ],
                      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
                      "branch": "mux_0",
                      "recursive": false
                    }
                  ],
                  "edges": [
                    {
                      "from": "truePath",
                      "to": "mux_0:input1"
                    },
                    {
                      "from": "falsePath",
                      "to": "mux_0:input2"
                    },
                    {
                      "from": "check",
                      "to": "mux_0:control"
                    },
                    {
                      "from": "mux_0:output",
                      "to": "value"
                    }
                  ]
                },
                "settings": {
                  "argumentOrdering": [
                    "check",
                    "truePath",
                    "falsePath",
                    "value"
                  ]
                },
                "path": [
                  {
                    "meta": "selectionsort",
                    "branch": "selectionsort_37",
                    "branchPath": "selectionsort_37"
                  },
                  {
                    "meta": "filter",
                    "branch": "filter_30",
                    "branchPath": "selectionsort_37:filter_30"
                  },
                  {
                    "meta": "functional/lambda",
                    "branch": "lambda_9",
                    "version": "0.2.0",
                    "branchPath": "selectionsort_37:filter_30:lambda_9"
                  },
                  {
                    "meta": "lambda_9_impl",
                    "branch": "lambda_9_impl",
                    "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                  }
                ],
                "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
                "branch": "if_10",
                "recursive": false
              },
              {
                "id": "functional/apply",
                "version": "0.3.0",
                "inputPorts": {
                  "fn": "generic",
                  "value": "generic"
                },
                "outputPorts": {
                  "result": "generic"
                },
                "implementation": {
                  "nodes": [
                    {
                      "id": "functional/call",
                      "version": "0.2.0",
                      "inputPorts": {
                        "fn": "function"
                      },
                      "outputPorts": {
                        "result": "function:return"
                      },
                      "atomic": true,
                      "specialForm": true,
                      "settings": {
                        "argumentOrdering": [
                          "fn",
                          "result"
                        ]
                      },
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "branchPath": "selectionsort_37"
                        },
                        {
                          "meta": "filter",
                          "branch": "filter_30",
                          "branchPath": "selectionsort_37:filter_30"
                        },
                        {
                          "meta": "functional/lambda",
                          "branch": "lambda_9",
                          "version": "0.2.0",
                          "branchPath": "selectionsort_37:filter_30:lambda_9"
                        },
                        {
                          "meta": "lambda_9_impl",
                          "branch": "lambda_9_impl",
                          "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                        },
                        {
                          "meta": "functional/apply",
                          "branch": "apply_11",
                          "version": "0.3.0",
                          "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
                        }
                      ],
                      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0",
                      "branch": "call_0",
                      "recursive": false
                    },
                    {
                      "id": "functional/partial",
                      "version": "0.2.1",
                      "inputPorts": {
                        "fn": "function",
                        "value": "function:arg"
                      },
                      "outputPorts": {
                        "result": "function:partial"
                      },
                      "atomic": true,
                      "specialForm": true,
                      "settings": {
                        "argumentOrdering": [
                          "fn",
                          "value",
                          "result"
                        ]
                      },
                      "path": [
                        {
                          "meta": "selectionsort",
                          "branch": "selectionsort_37",
                          "branchPath": "selectionsort_37"
                        },
                        {
                          "meta": "filter",
                          "branch": "filter_30",
                          "branchPath": "selectionsort_37:filter_30"
                        },
                        {
                          "meta": "functional/lambda",
                          "branch": "lambda_9",
                          "version": "0.2.0",
                          "branchPath": "selectionsort_37:filter_30:lambda_9"
                        },
                        {
                          "meta": "lambda_9_impl",
                          "branch": "lambda_9_impl",
                          "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                        },
                        {
                          "meta": "functional/apply",
                          "branch": "apply_11",
                          "version": "0.3.0",
                          "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
                        }
                      ],
                      "params": {
                        "partial": 0
                      },
                      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                      "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1",
                      "branch": "partial_1",
                      "recursive": false
                    }
                  ],
                  "edges": [
                    {
                      "from": "fn",
                      "to": "partial_1:fn"
                    },
                    {
                      "from": "value",
                      "to": "partial_1:value"
                    },
                    {
                      "from": "partial_1:result",
                      "to": "call_0:fn"
                    },
                    {
                      "from": "call_0:result",
                      "to": "result"
                    }
                  ]
                },
                "settings": {
                  "argumentOrdering": [
                    "fn",
                    "value",
                    "result"
                  ]
                },
                "path": [
                  {
                    "meta": "selectionsort",
                    "branch": "selectionsort_37",
                    "branchPath": "selectionsort_37"
                  },
                  {
                    "meta": "filter",
                    "branch": "filter_30",
                    "branchPath": "selectionsort_37:filter_30"
                  },
                  {
                    "meta": "functional/lambda",
                    "branch": "lambda_9",
                    "version": "0.2.0",
                    "branchPath": "selectionsort_37:filter_30:lambda_9"
                  },
                  {
                    "meta": "lambda_9_impl",
                    "branch": "lambda_9_impl",
                    "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                  }
                ],
                "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                "branch": "apply_11",
                "recursive": false
              },
              {
                "id": "array/prepend",
                "version": "0.2.3",
                "inputPorts": {
                  "array": "[generic]",
                  "value": "generic"
                },
                "outputPorts": {
                  "result": "[generic]"
                },
                "atomic": true,
                "settings": {
                  "argumentOrdering": [
                    "array",
                    "value",
                    "result"
                  ]
                },
                "path": [
                  {
                    "meta": "selectionsort",
                    "branch": "selectionsort_37",
                    "branchPath": "selectionsort_37"
                  },
                  {
                    "meta": "filter",
                    "branch": "filter_30",
                    "branchPath": "selectionsort_37:filter_30"
                  },
                  {
                    "meta": "functional/lambda",
                    "branch": "lambda_9",
                    "version": "0.2.0",
                    "branchPath": "selectionsort_37:filter_30:lambda_9"
                  },
                  {
                    "meta": "lambda_9_impl",
                    "branch": "lambda_9_impl",
                    "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                  }
                ],
                "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
                "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12",
                "branch": "prepend_12",
                "recursive": false
              }
            ],
            "edges": [
              {
                "from": "fn",
                "to": "apply_11:fn"
              },
              {
                "from": "cur",
                "to": "apply_11:value"
              },
              {
                "from": "apply_11:result",
                "to": "if_10:check"
              },
              {
                "from": "acc",
                "to": "prepend_12:array"
              },
              {
                "from": "cur",
                "to": "prepend_12:value"
              },
              {
                "from": "prepend_12:result",
                "to": "if_10:truePath"
              },
              {
                "from": "acc",
                "to": "if_10:falsePath"
              },
              {
                "from": "if_10:value",
                "to": "value_0"
              }
            ]
          },
          "id": "lambda_9_impl",
          "externalComponent": true,
          "path": [
            {
              "meta": "selectionsort",
              "branch": "selectionsort_37",
              "branchPath": "selectionsort_37"
            },
            {
              "meta": "filter",
              "branch": "filter_30",
              "branchPath": "selectionsort_37:filter_30"
            },
            {
              "meta": "functional/lambda",
              "branch": "lambda_9",
              "version": "0.2.0",
              "branchPath": "selectionsort_37:filter_30:lambda_9"
            }
          ],
          "parent": "selectionsort_37:filter_30:lambda_9",
          "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
          "branch": "lambda_9_impl",
          "recursive": false
        },
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30"
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
      "value": {
        "outputPorts": {
          "value_0": "[int64]"
        },
        "settings": {
          "argumentOrdering": [
            "fn",
            "acc",
            "cur",
            "value_0"
          ],
          "genericType": {
            "cur": {
              "type": "type-ref",
              "node": "selectionsort_37:lambda_32:lambda_32_impl",
              "port": "y",
              "template": "generic"
            },
            "acc": "[int64]",
            "value_0": "[int64]"
          },
          "isGeneric": true
        },
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "y": "int64"
            },
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": "bool"
            },
            "return": "bool"
          },
          "acc": "[int64]",
          "cur": "int64"
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/if",
              "version": "0.2.0",
              "inputPorts": {
                "check": "bool",
                "truePath": "generic",
                "falsePath": "generic"
              },
              "outputPorts": {
                "value": "generic"
              },
              "implementation": {
                "nodes": [
                  {
                    "id": "logic/mux",
                    "inputPorts": {
                      "input1": "generic",
                      "input2": "generic",
                      "control": "bool"
                    },
                    "outputPorts": {
                      "output": "generic"
                    },
                    "atomic": true,
                    "version": "0.3.0",
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "input1",
                        "input2",
                        "control",
                        "output"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "functional/lambda",
                        "branch": "lambda_9",
                        "version": "0.2.0",
                        "branchPath": "selectionsort_37:filter_30:lambda_9"
                      },
                      {
                        "meta": "lambda_9_impl",
                        "branch": "lambda_9_impl",
                        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                      },
                      {
                        "meta": "logic/if",
                        "branch": "if_10",
                        "version": "0.2.0",
                        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
                    "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
                    "branch": "mux_0",
                    "recursive": false
                  }
                ],
                "edges": [
                  {
                    "from": "truePath",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "falsePath",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "check",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "value"
                  }
                ]
              },
              "settings": {
                "argumentOrdering": [
                  "check",
                  "truePath",
                  "falsePath",
                  "value"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "functional/lambda",
                  "branch": "lambda_9",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:filter_30:lambda_9"
                },
                {
                  "meta": "lambda_9_impl",
                  "branch": "lambda_9_impl",
                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                }
              ],
              "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
              "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
              "branch": "if_10",
              "recursive": false
            },
            {
              "id": "functional/apply",
              "version": "0.3.0",
              "inputPorts": {
                "fn": "generic",
                "value": "generic"
              },
              "outputPorts": {
                "result": "generic"
              },
              "implementation": {
                "nodes": [
                  {
                    "id": "functional/call",
                    "version": "0.2.0",
                    "inputPorts": {
                      "fn": "function"
                    },
                    "outputPorts": {
                      "result": "function:return"
                    },
                    "atomic": true,
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "fn",
                        "result"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "functional/lambda",
                        "branch": "lambda_9",
                        "version": "0.2.0",
                        "branchPath": "selectionsort_37:filter_30:lambda_9"
                      },
                      {
                        "meta": "lambda_9_impl",
                        "branch": "lambda_9_impl",
                        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                      },
                      {
                        "meta": "functional/apply",
                        "branch": "apply_11",
                        "version": "0.3.0",
                        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
                      }
                    ],
                    "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                    "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0",
                    "branch": "call_0",
                    "recursive": false
                  },
                  {
                    "id": "functional/partial",
                    "version": "0.2.1",
                    "inputPorts": {
                      "fn": "function",
                      "value": "function:arg"
                    },
                    "outputPorts": {
                      "result": "function:partial"
                    },
                    "atomic": true,
                    "specialForm": true,
                    "settings": {
                      "argumentOrdering": [
                        "fn",
                        "value",
                        "result"
                      ]
                    },
                    "path": [
                      {
                        "meta": "selectionsort",
                        "branch": "selectionsort_37",
                        "branchPath": "selectionsort_37"
                      },
                      {
                        "meta": "filter",
                        "branch": "filter_30",
                        "branchPath": "selectionsort_37:filter_30"
                      },
                      {
                        "meta": "functional/lambda",
                        "branch": "lambda_9",
                        "version": "0.2.0",
                        "branchPath": "selectionsort_37:filter_30:lambda_9"
                      },
                      {
                        "meta": "lambda_9_impl",
                        "branch": "lambda_9_impl",
                        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                      },
                      {
                        "meta": "functional/apply",
                        "branch": "apply_11",
                        "version": "0.3.0",
                        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
                      }
                    ],
                    "params": {
                      "partial": 0
                    },
                    "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
                    "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1",
                    "branch": "partial_1",
                    "recursive": false
                  }
                ],
                "edges": [
                  {
                    "from": "fn",
                    "to": "partial_1:fn"
                  },
                  {
                    "from": "value",
                    "to": "partial_1:value"
                  },
                  {
                    "from": "partial_1:result",
                    "to": "call_0:fn"
                  },
                  {
                    "from": "call_0:result",
                    "to": "result"
                  }
                ]
              },
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "value",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "functional/lambda",
                  "branch": "lambda_9",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:filter_30:lambda_9"
                },
                {
                  "meta": "lambda_9_impl",
                  "branch": "lambda_9_impl",
                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                }
              ],
              "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
              "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
              "branch": "apply_11",
              "recursive": false
            },
            {
              "id": "array/prepend",
              "version": "0.2.3",
              "inputPorts": {
                "array": "[generic]",
                "value": "generic"
              },
              "outputPorts": {
                "result": "[generic]"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "array",
                  "value",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "functional/lambda",
                  "branch": "lambda_9",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:filter_30:lambda_9"
                },
                {
                  "meta": "lambda_9_impl",
                  "branch": "lambda_9_impl",
                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                }
              ],
              "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
              "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12",
              "branch": "prepend_12",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "fn",
              "to": "apply_11:fn"
            },
            {
              "from": "cur",
              "to": "apply_11:value"
            },
            {
              "from": "apply_11:result",
              "to": "if_10:check"
            },
            {
              "from": "acc",
              "to": "prepend_12:array"
            },
            {
              "from": "cur",
              "to": "prepend_12:value"
            },
            {
              "from": "prepend_12:result",
              "to": "if_10:truePath"
            },
            {
              "from": "acc",
              "to": "if_10:falsePath"
            },
            {
              "from": "if_10:value",
              "to": "value_0"
            }
          ]
        },
        "id": "lambda_9_impl",
        "externalComponent": true,
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "functional/lambda",
            "branch": "lambda_9",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:filter_30:lambda_9"
          }
        ],
        "parent": "selectionsort_37:filter_30:lambda_9",
        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
        "branch": "lambda_9_impl",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:lambda_9"
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
      "value": {
        "id": "logic/if",
        "version": "0.2.0",
        "inputPorts": {
          "check": "bool",
          "truePath": "[int64]",
          "falsePath": "[int64]"
        },
        "outputPorts": {
          "value": "[int64]"
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/mux",
              "inputPorts": {
                "input1": "generic",
                "input2": "generic",
                "control": "bool"
              },
              "outputPorts": {
                "output": "generic"
              },
              "atomic": true,
              "version": "0.3.0",
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "input1",
                  "input2",
                  "control",
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "functional/lambda",
                  "branch": "lambda_9",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:filter_30:lambda_9"
                },
                {
                  "meta": "lambda_9_impl",
                  "branch": "lambda_9_impl",
                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                },
                {
                  "meta": "logic/if",
                  "branch": "if_10",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10"
                }
              ],
              "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
              "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
              "branch": "mux_0",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "truePath",
              "to": "mux_0:input1"
            },
            {
              "from": "falsePath",
              "to": "mux_0:input2"
            },
            {
              "from": "check",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "value"
            }
          ]
        },
        "settings": {
          "argumentOrdering": [
            "check",
            "truePath",
            "falsePath",
            "value"
          ],
          "genericType": {
            "truePath": {
              "type": "type-ref",
              "node": "selectionsort_37:lambda_32:lambda_32_impl",
              "port": "y",
              "template": "[generic]"
            },
            "falsePath": {
              "type": "type-ref",
              "node": "selectionsort_37:lambda_32:lambda_32_impl",
              "port": "y",
              "template": "[generic]"
            },
            "value": {
              "type": "type-ref",
              "node": "selectionsort_37:lambda_32:lambda_32_impl",
              "port": "y",
              "template": "[generic]"
            }
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "functional/lambda",
            "branch": "lambda_9",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:filter_30:lambda_9"
          },
          {
            "meta": "lambda_9_impl",
            "branch": "lambda_9_impl",
            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
          }
        ],
        "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
        "branch": "if_10",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
      "value": {
        "id": "logic/mux",
        "inputPorts": {
          "input1": "[int64]",
          "input2": "[int64]",
          "control": "bool"
        },
        "outputPorts": {
          "output": "[int64]"
        },
        "atomic": true,
        "version": "0.3.0",
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "input1",
            "input2",
            "control",
            "output"
          ],
          "genericType": {
            "type": "type-ref",
            "node": "selectionsort_37:lambda_32:lambda_32_impl",
            "port": "y",
            "template": "[generic]"
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "functional/lambda",
            "branch": "lambda_9",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:filter_30:lambda_9"
          },
          {
            "meta": "lambda_9_impl",
            "branch": "lambda_9_impl",
            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
          },
          {
            "meta": "logic/if",
            "branch": "if_10",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10"
          }
        ],
        "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
        "branch": "mux_0",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10"
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
      "value": {
        "id": "functional/apply",
        "version": "0.3.0",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "y": "int64"
            },
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": "bool"
            },
            "return": "bool"
          },
          "value": "int64"
        },
        "outputPorts": {
          "result": "bool"
        },
        "implementation": {
          "nodes": [
            {
              "id": "functional/call",
              "version": "0.2.0",
              "inputPorts": {
                "fn": "function"
              },
              "outputPorts": {
                "result": "function:return"
              },
              "atomic": true,
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "functional/lambda",
                  "branch": "lambda_9",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:filter_30:lambda_9"
                },
                {
                  "meta": "lambda_9_impl",
                  "branch": "lambda_9_impl",
                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                },
                {
                  "meta": "functional/apply",
                  "branch": "apply_11",
                  "version": "0.3.0",
                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
                }
              ],
              "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
              "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0",
              "branch": "call_0",
              "recursive": false
            },
            {
              "id": "functional/partial",
              "version": "0.2.1",
              "inputPorts": {
                "fn": "function",
                "value": "function:arg"
              },
              "outputPorts": {
                "result": "function:partial"
              },
              "atomic": true,
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "fn",
                  "value",
                  "result"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "filter",
                  "branch": "filter_30",
                  "branchPath": "selectionsort_37:filter_30"
                },
                {
                  "meta": "functional/lambda",
                  "branch": "lambda_9",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:filter_30:lambda_9"
                },
                {
                  "meta": "lambda_9_impl",
                  "branch": "lambda_9_impl",
                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
                },
                {
                  "meta": "functional/apply",
                  "branch": "apply_11",
                  "version": "0.3.0",
                  "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
                }
              ],
              "params": {
                "partial": 0
              },
              "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
              "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1",
              "branch": "partial_1",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "fn",
              "to": "partial_1:fn"
            },
            {
              "from": "value",
              "to": "partial_1:value"
            },
            {
              "from": "partial_1:result",
              "to": "call_0:fn"
            },
            {
              "from": "call_0:result",
              "to": "result"
            }
          ]
        },
        "settings": {
          "argumentOrdering": [
            "fn",
            "value",
            "result"
          ],
          "genericType": {
            "result": "bool",
            "value": {
              "type": "type-ref",
              "node": "selectionsort_37:lambda_32:lambda_32_impl",
              "port": "y",
              "template": "generic"
            }
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "functional/lambda",
            "branch": "lambda_9",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:filter_30:lambda_9"
          },
          {
            "meta": "lambda_9_impl",
            "branch": "lambda_9_impl",
            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
          }
        ],
        "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
        "branch": "apply_11",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0",
      "value": {
        "id": "functional/call",
        "version": "0.2.0",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {},
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": "bool"
            },
            "return": "bool"
          }
        },
        "outputPorts": {
          "result": "bool"
        },
        "atomic": true,
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "fn",
            "result"
          ],
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "functional/lambda",
            "branch": "lambda_9",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:filter_30:lambda_9"
          },
          {
            "meta": "lambda_9_impl",
            "branch": "lambda_9_impl",
            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
          },
          {
            "meta": "functional/apply",
            "branch": "apply_11",
            "version": "0.3.0",
            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
          }
        ],
        "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0",
        "branch": "call_0",
        "recursive": false,
        "typeHint": {},
        "partial": {}
      },
      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1",
      "value": {
        "id": "functional/partial",
        "version": "0.2.1",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "y": "int64"
            },
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": "bool"
            },
            "return": "bool"
          },
          "value": "int64"
        },
        "outputPorts": {
          "result": {
            "type": "function",
            "arguments": {},
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": "bool"
            },
            "return": "bool"
          }
        },
        "atomic": true,
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "fn",
            "value",
            "result"
          ],
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "functional/lambda",
            "branch": "lambda_9",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:filter_30:lambda_9"
          },
          {
            "meta": "lambda_9_impl",
            "branch": "lambda_9_impl",
            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
          },
          {
            "meta": "functional/apply",
            "branch": "apply_11",
            "version": "0.3.0",
            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
          }
        ],
        "params": {
          "partial": 0
        },
        "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1",
        "branch": "partial_1",
        "recursive": false,
        "typeHint": {},
        "partial": {}
      },
      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11"
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12",
      "value": {
        "id": "array/prepend",
        "version": "0.2.3",
        "inputPorts": {
          "array": "[int64]",
          "value": "int64"
        },
        "outputPorts": {
          "result": "[int64]"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "array",
            "value",
            "result"
          ],
          "genericType": {
            "type": "type-ref",
            "node": "selectionsort_37:lambda_32:lambda_32_impl",
            "port": "y",
            "template": "generic"
          },
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          },
          {
            "meta": "functional/lambda",
            "branch": "lambda_9",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:filter_30:lambda_9"
          },
          {
            "meta": "lambda_9_impl",
            "branch": "lambda_9_impl",
            "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
          }
        ],
        "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
        "branchPath": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12",
        "branch": "prepend_12",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30:lambda_9:lambda_9_impl"
    },
    {
      "v": "selectionsort_37:filter_30:array/emptyArray_13",
      "value": {
        "id": "array/emptyArray",
        "inputPorts": {},
        "outputPorts": {
          "output": "[int64]"
        },
        "atomic": true,
        "version": "0.2.1",
        "settings": {
          "argumentOrdering": [
            "output"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "filter",
            "branch": "filter_30",
            "branchPath": "selectionsort_37:filter_30"
          }
        ],
        "parent": "selectionsort_37:filter_30",
        "branchPath": "selectionsort_37:filter_30:array/emptyArray_13",
        "branch": "array/emptyArray_13",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:filter_30"
    },
    {
      "v": "selectionsort_37:partial_31",
      "value": {
        "id": "functional/partial",
        "version": "0.2.1",
        "inputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "x": "int64",
              "y": "int64"
            },
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": "bool"
            },
            "return": "bool"
          },
          "value": "int64"
        },
        "outputPorts": {
          "result": {
            "type": "function",
            "arguments": {
              "y": "int64"
            },
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": "bool"
            },
            "return": "bool"
          }
        },
        "atomic": true,
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "fn",
            "value",
            "result"
          ],
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          }
        ],
        "params": {
          "partial": 0
        },
        "parent": "selectionsort_37",
        "branchPath": "selectionsort_37:partial_31",
        "branch": "partial_31",
        "recursive": false,
        "typeHint": {},
        "partial": {
          "partial": "selectionsort_37:partial_31",
          "port": "x",
          "portIndex": 0,
          "lambda": null
        }
      },
      "parent": "selectionsort_37"
    },
    {
      "v": "selectionsort_37:lambda_32",
      "value": {
        "id": "functional/lambda",
        "version": "0.2.0",
        "inputPorts": {},
        "outputPorts": {
          "fn": {
            "type": "function",
            "arguments": {
              "x": "int64",
              "y": "int64"
            },
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ],
            "outputs": {
              "value_0": "bool"
            },
            "return": "bool"
          }
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "fn"
          ],
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          }
        ],
        "params": {
          "implementation": "selectionsort_37:lambda_32:lambda_32_impl"
        },
        "parent": "selectionsort_37",
        "branchPath": "selectionsort_37:lambda_32",
        "branch": "lambda_32",
        "isLambda": true,
        "data": {
          "outputPorts": {
            "value_0": "generic"
          },
          "settings": {
            "argumentOrdering": [
              "x",
              "y",
              "value_0"
            ]
          },
          "inputPorts": {
            "x": "generic",
            "y": "generic"
          },
          "implementation": {
            "nodes": [
              {
                "name": "NOT",
                "id": "logic/not",
                "inputPorts": {
                  "input": "bool"
                },
                "outputPorts": {
                  "output": "bool"
                },
                "atomic": true,
                "version": "0.2.0",
                "settings": {
                  "argumentOrdering": [
                    "input",
                    "output"
                  ]
                },
                "path": [
                  {
                    "meta": "selectionsort",
                    "branch": "selectionsort_37",
                    "branchPath": "selectionsort_37"
                  },
                  {
                    "meta": "functional/lambda",
                    "branch": "lambda_32",
                    "version": "0.2.0",
                    "branchPath": "selectionsort_37:lambda_32"
                  },
                  {
                    "meta": "lambda_32_impl",
                    "branch": "lambda_32_impl",
                    "branchPath": "selectionsort_37:lambda_32:lambda_32_impl"
                  }
                ],
                "parent": "selectionsort_37:lambda_32:lambda_32_impl",
                "branchPath": "selectionsort_37:lambda_32:lambda_32_impl:not_33",
                "branch": "not_33",
                "recursive": false
              },
              {
                "name": "EQUAL",
                "id": "logic/equal",
                "inputPorts": {
                  "i1": "generic",
                  "i2": "generic"
                },
                "outputPorts": {
                  "eq": "bool"
                },
                "atomic": true,
                "version": "0.2.0",
                "settings": {
                  "argumentOrdering": [
                    "i1",
                    "i2",
                    "eq"
                  ]
                },
                "path": [
                  {
                    "meta": "selectionsort",
                    "branch": "selectionsort_37",
                    "branchPath": "selectionsort_37"
                  },
                  {
                    "meta": "functional/lambda",
                    "branch": "lambda_32",
                    "version": "0.2.0",
                    "branchPath": "selectionsort_37:lambda_32"
                  },
                  {
                    "meta": "lambda_32_impl",
                    "branch": "lambda_32_impl",
                    "branchPath": "selectionsort_37:lambda_32:lambda_32_impl"
                  }
                ],
                "parent": "selectionsort_37:lambda_32:lambda_32_impl",
                "branchPath": "selectionsort_37:lambda_32:lambda_32_impl:equal_34",
                "branch": "equal_34",
                "recursive": false
              }
            ],
            "edges": [
              {
                "from": "x",
                "to": "equal_34:i1"
              },
              {
                "from": "y",
                "to": "equal_34:i2"
              },
              {
                "from": "equal_34:eq",
                "to": "not_33:input"
              },
              {
                "from": "not_33:output",
                "to": "value_0"
              }
            ]
          },
          "id": "lambda_32_impl",
          "externalComponent": true,
          "path": [
            {
              "meta": "selectionsort",
              "branch": "selectionsort_37",
              "branchPath": "selectionsort_37"
            },
            {
              "meta": "functional/lambda",
              "branch": "lambda_32",
              "version": "0.2.0",
              "branchPath": "selectionsort_37:lambda_32"
            }
          ],
          "parent": "selectionsort_37:lambda_32",
          "branchPath": "selectionsort_37:lambda_32:lambda_32_impl",
          "branch": "lambda_32_impl",
          "recursive": false
        },
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37"
    },
    {
      "v": "selectionsort_37:lambda_32:lambda_32_impl",
      "value": {
        "outputPorts": {
          "value_0": "bool"
        },
        "settings": {
          "argumentOrdering": [
            "x",
            "y",
            "value_0"
          ],
          "genericType": {
            "x": "int64",
            "value_0": "bool",
            "y": "int64"
          },
          "isGeneric": true
        },
        "inputPorts": {
          "x": "int64",
          "y": "int64"
        },
        "implementation": {
          "nodes": [
            {
              "name": "NOT",
              "id": "logic/not",
              "inputPorts": {
                "input": "bool"
              },
              "outputPorts": {
                "output": "bool"
              },
              "atomic": true,
              "version": "0.2.0",
              "settings": {
                "argumentOrdering": [
                  "input",
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "functional/lambda",
                  "branch": "lambda_32",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:lambda_32"
                },
                {
                  "meta": "lambda_32_impl",
                  "branch": "lambda_32_impl",
                  "branchPath": "selectionsort_37:lambda_32:lambda_32_impl"
                }
              ],
              "parent": "selectionsort_37:lambda_32:lambda_32_impl",
              "branchPath": "selectionsort_37:lambda_32:lambda_32_impl:not_33",
              "branch": "not_33",
              "recursive": false
            },
            {
              "name": "EQUAL",
              "id": "logic/equal",
              "inputPorts": {
                "i1": "generic",
                "i2": "generic"
              },
              "outputPorts": {
                "eq": "bool"
              },
              "atomic": true,
              "version": "0.2.0",
              "settings": {
                "argumentOrdering": [
                  "i1",
                  "i2",
                  "eq"
                ]
              },
              "path": [
                {
                  "meta": "selectionsort",
                  "branch": "selectionsort_37",
                  "branchPath": "selectionsort_37"
                },
                {
                  "meta": "functional/lambda",
                  "branch": "lambda_32",
                  "version": "0.2.0",
                  "branchPath": "selectionsort_37:lambda_32"
                },
                {
                  "meta": "lambda_32_impl",
                  "branch": "lambda_32_impl",
                  "branchPath": "selectionsort_37:lambda_32:lambda_32_impl"
                }
              ],
              "parent": "selectionsort_37:lambda_32:lambda_32_impl",
              "branchPath": "selectionsort_37:lambda_32:lambda_32_impl:equal_34",
              "branch": "equal_34",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "x",
              "to": "equal_34:i1"
            },
            {
              "from": "y",
              "to": "equal_34:i2"
            },
            {
              "from": "equal_34:eq",
              "to": "not_33:input"
            },
            {
              "from": "not_33:output",
              "to": "value_0"
            }
          ]
        },
        "id": "lambda_32_impl",
        "externalComponent": true,
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "functional/lambda",
            "branch": "lambda_32",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:lambda_32"
          }
        ],
        "parent": "selectionsort_37:lambda_32",
        "branchPath": "selectionsort_37:lambda_32:lambda_32_impl",
        "branch": "lambda_32_impl",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:lambda_32"
    },
    {
      "v": "selectionsort_37:lambda_32:lambda_32_impl:not_33",
      "value": {
        "name": "NOT",
        "id": "logic/not",
        "inputPorts": {
          "input": "bool"
        },
        "outputPorts": {
          "output": "bool"
        },
        "atomic": true,
        "version": "0.2.0",
        "settings": {
          "argumentOrdering": [
            "input",
            "output"
          ]
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "functional/lambda",
            "branch": "lambda_32",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:lambda_32"
          },
          {
            "meta": "lambda_32_impl",
            "branch": "lambda_32_impl",
            "branchPath": "selectionsort_37:lambda_32:lambda_32_impl"
          }
        ],
        "parent": "selectionsort_37:lambda_32:lambda_32_impl",
        "branchPath": "selectionsort_37:lambda_32:lambda_32_impl:not_33",
        "branch": "not_33",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:lambda_32:lambda_32_impl"
    },
    {
      "v": "selectionsort_37:lambda_32:lambda_32_impl:equal_34",
      "value": {
        "name": "EQUAL",
        "id": "logic/equal",
        "inputPorts": {
          "i1": "int64",
          "i2": "int64"
        },
        "outputPorts": {
          "eq": "bool"
        },
        "atomic": true,
        "version": "0.2.0",
        "settings": {
          "argumentOrdering": [
            "i1",
            "i2",
            "eq"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "selectionsort",
            "branch": "selectionsort_37",
            "branchPath": "selectionsort_37"
          },
          {
            "meta": "functional/lambda",
            "branch": "lambda_32",
            "version": "0.2.0",
            "branchPath": "selectionsort_37:lambda_32"
          },
          {
            "meta": "lambda_32_impl",
            "branch": "lambda_32_impl",
            "branchPath": "selectionsort_37:lambda_32:lambda_32_impl"
          }
        ],
        "parent": "selectionsort_37:lambda_32:lambda_32_impl",
        "branchPath": "selectionsort_37:lambda_32:lambda_32_impl:equal_34",
        "branch": "equal_34",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "selectionsort_37:lambda_32:lambda_32_impl"
    },
    {
      "v": "string_to_array_38",
      "value": {
        "id": "translator/string_to_array",
        "version": "0.2.1",
        "inputPorts": {
          "input": "string"
        },
        "outputPorts": {
          "output": "[int64]"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "input",
            "output"
          ],
          "genericType": "[int64]",
          "isGeneric": true
        },
        "path": [],
        "branchPath": "string_to_array_38",
        "branch": "string_to_array_38",
        "name": "string_to_array_38",
        "recursive": false,
        "typeHint": {}
      }
    },
    {
      "v": "stdin_39",
      "value": {
        "id": "io/stdin",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "string"
        },
        "settings": {
          "sideEffects": true,
          "argumentOrdering": [
            "output"
          ]
        },
        "atomic": true,
        "path": [],
        "branchPath": "stdin_39",
        "branch": "stdin_39",
        "name": "stdin_39",
        "recursive": false,
        "typeHint": {}
      }
    }
  ],
  "edges": [
    {
      "v": "stdin_39",
      "w": "string_to_array_38",
      "value": {
        "outPort": "output",
        "inPort": "input"
      }
    },
    {
      "v": "string_to_array_38",
      "w": "selectionsort_37",
      "value": {
        "outPort": "output",
        "inPort": "list"
      }
    },
    {
      "v": "selectionsort_37",
      "w": "array_to_string_36",
      "value": {
        "outPort": "value",
        "inPort": "input"
      }
    },
    {
      "v": "array_to_string_36",
      "w": "stdout_35",
      "value": {
        "outPort": "output",
        "inPort": "input"
      }
    },
    {
      "v": "selectionsort_37",
      "w": "selectionsort_37:empty_26",
      "name": "selectionsort_37:list→selectionsort_37:empty_26:array",
      "value": {
        "outPort": "list",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:empty_26",
      "w": "selectionsort_37:if_25",
      "name": "selectionsort_37:empty_26:isEmpty→selectionsort_37:if_25:check",
      "value": {
        "outPort": "isEmpty",
        "inPort": "check"
      }
    },
    {
      "v": "selectionsort_37",
      "w": "selectionsort_37:if_25",
      "name": "selectionsort_37:list→selectionsort_37:if_25:truePath",
      "value": {
        "outPort": "list",
        "inPort": "truePath"
      }
    },
    {
      "v": "selectionsort_37",
      "w": "selectionsort_37:min_27",
      "name": "selectionsort_37:list→selectionsort_37:min_27:list",
      "value": {
        "outPort": "list",
        "inPort": "list"
      }
    },
    {
      "v": "selectionsort_37",
      "w": "selectionsort_37:filter_30",
      "name": "selectionsort_37:list→selectionsort_37:filter_30:list",
      "value": {
        "outPort": "list",
        "inPort": "list"
      }
    },
    {
      "v": "selectionsort_37:lambda_32",
      "w": "selectionsort_37:partial_31",
      "name": "selectionsort_37:lambda_32:fn→selectionsort_37:partial_31:fn",
      "value": {
        "outPort": "fn",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:min_27",
      "w": "selectionsort_37:partial_31",
      "name": "selectionsort_37:min_27:value→selectionsort_37:partial_31:value",
      "value": {
        "outPort": "value",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:partial_31",
      "w": "selectionsort_37:filter_30",
      "name": "selectionsort_37:partial_31:result→selectionsort_37:filter_30:fn",
      "value": {
        "outPort": "result",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30",
      "w": "selectionsort_37:selectionsort_29",
      "name": "selectionsort_37:filter_30:value→selectionsort_37:selectionsort_29:list",
      "value": {
        "outPort": "value",
        "inPort": "list"
      }
    },
    {
      "v": "selectionsort_37:selectionsort_29",
      "w": "selectionsort_37:prepend_28",
      "name": "selectionsort_37:selectionsort_29:value→selectionsort_37:prepend_28:array",
      "value": {
        "outPort": "value",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:min_27",
      "w": "selectionsort_37:prepend_28",
      "name": "selectionsort_37:min_27:value→selectionsort_37:prepend_28:value",
      "value": {
        "outPort": "value",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:prepend_28",
      "w": "selectionsort_37:if_25",
      "name": "selectionsort_37:prepend_28:result→selectionsort_37:if_25:falsePath",
      "value": {
        "outPort": "result",
        "inPort": "falsePath"
      }
    },
    {
      "v": "selectionsort_37:if_25",
      "w": "selectionsort_37",
      "name": "selectionsort_37:if_25:value→selectionsort_37:value",
      "value": {
        "outPort": "value",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:if_25",
      "w": "selectionsort_37:if_25:mux_0",
      "name": "selectionsort_37:if_25:truePath→selectionsort_37:if_25:mux_0:input1",
      "value": {
        "outPort": "truePath",
        "inPort": "input1"
      }
    },
    {
      "v": "selectionsort_37:if_25",
      "w": "selectionsort_37:if_25:mux_0",
      "name": "selectionsort_37:if_25:falsePath→selectionsort_37:if_25:mux_0:input2",
      "value": {
        "outPort": "falsePath",
        "inPort": "input2"
      }
    },
    {
      "v": "selectionsort_37:if_25",
      "w": "selectionsort_37:if_25:mux_0",
      "name": "selectionsort_37:if_25:check→selectionsort_37:if_25:mux_0:control",
      "value": {
        "outPort": "check",
        "inPort": "control"
      }
    },
    {
      "v": "selectionsort_37:if_25:mux_0",
      "w": "selectionsort_37:if_25",
      "name": "selectionsort_37:if_25:mux_0:output→selectionsort_37:if_25:value",
      "value": {
        "outPort": "output",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:min_27",
      "w": "selectionsort_37:min_27:empty_15",
      "name": "selectionsort_37:min_27:list→selectionsort_37:min_27:empty_15:array",
      "value": {
        "outPort": "list",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:min_27:empty_15",
      "w": "selectionsort_37:min_27:if_14",
      "name": "selectionsort_37:min_27:empty_15:isEmpty→selectionsort_37:min_27:if_14:check",
      "value": {
        "outPort": "isEmpty",
        "inPort": "check"
      }
    },
    {
      "v": "selectionsort_37:min_27:const(100000000000)_16",
      "w": "selectionsort_37:min_27:if_14",
      "name": "selectionsort_37:min_27:const(100000000000)_16:output→selectionsort_37:min_27:if_14:truePath",
      "value": {
        "outPort": "output",
        "inPort": "truePath"
      }
    },
    {
      "v": "selectionsort_37:min_27",
      "w": "selectionsort_37:min_27:first_19",
      "name": "selectionsort_37:min_27:list→selectionsort_37:min_27:first_19:array",
      "value": {
        "outPort": "list",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:min_27:first_19",
      "w": "selectionsort_37:min_27:less_18",
      "name": "selectionsort_37:min_27:first_19:value→selectionsort_37:min_27:less_18:isLess",
      "value": {
        "outPort": "value",
        "inPort": "isLess"
      }
    },
    {
      "v": "selectionsort_37:min_27",
      "w": "selectionsort_37:min_27:rest_21",
      "name": "selectionsort_37:min_27:list→selectionsort_37:min_27:rest_21:array",
      "value": {
        "outPort": "list",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:min_27:rest_21",
      "w": "selectionsort_37:min_27:min_20",
      "name": "selectionsort_37:min_27:rest_21:rest→selectionsort_37:min_27:min_20:list",
      "value": {
        "outPort": "rest",
        "inPort": "list"
      }
    },
    {
      "v": "selectionsort_37:min_27:min_20",
      "w": "selectionsort_37:min_27:less_18",
      "name": "selectionsort_37:min_27:min_20:value→selectionsort_37:min_27:less_18:than",
      "value": {
        "outPort": "value",
        "inPort": "than"
      }
    },
    {
      "v": "selectionsort_37:min_27:less_18",
      "w": "selectionsort_37:min_27:if_17",
      "name": "selectionsort_37:min_27:less_18:value→selectionsort_37:min_27:if_17:check",
      "value": {
        "outPort": "value",
        "inPort": "check"
      }
    },
    {
      "v": "selectionsort_37:min_27",
      "w": "selectionsort_37:min_27:first_22",
      "name": "selectionsort_37:min_27:list→selectionsort_37:min_27:first_22:array",
      "value": {
        "outPort": "list",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:min_27:first_22",
      "w": "selectionsort_37:min_27:if_17",
      "name": "selectionsort_37:min_27:first_22:value→selectionsort_37:min_27:if_17:truePath",
      "value": {
        "outPort": "value",
        "inPort": "truePath"
      }
    },
    {
      "v": "selectionsort_37:min_27",
      "w": "selectionsort_37:min_27:rest_24",
      "name": "selectionsort_37:min_27:list→selectionsort_37:min_27:rest_24:array",
      "value": {
        "outPort": "list",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:min_27:rest_24",
      "w": "selectionsort_37:min_27:min_23",
      "name": "selectionsort_37:min_27:rest_24:rest→selectionsort_37:min_27:min_23:list",
      "value": {
        "outPort": "rest",
        "inPort": "list"
      }
    },
    {
      "v": "selectionsort_37:min_27:min_23",
      "w": "selectionsort_37:min_27:if_17",
      "name": "selectionsort_37:min_27:min_23:value→selectionsort_37:min_27:if_17:falsePath",
      "value": {
        "outPort": "value",
        "inPort": "falsePath"
      }
    },
    {
      "v": "selectionsort_37:min_27:if_17",
      "w": "selectionsort_37:min_27:if_14",
      "name": "selectionsort_37:min_27:if_17:value→selectionsort_37:min_27:if_14:falsePath",
      "value": {
        "outPort": "value",
        "inPort": "falsePath"
      }
    },
    {
      "v": "selectionsort_37:min_27:if_14",
      "w": "selectionsort_37:min_27",
      "name": "selectionsort_37:min_27:if_14:value→selectionsort_37:min_27:value",
      "value": {
        "outPort": "value",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:min_27:if_14",
      "w": "selectionsort_37:min_27:if_14:mux_0",
      "name": "selectionsort_37:min_27:if_14:truePath→selectionsort_37:min_27:if_14:mux_0:input1",
      "value": {
        "outPort": "truePath",
        "inPort": "input1"
      }
    },
    {
      "v": "selectionsort_37:min_27:if_14",
      "w": "selectionsort_37:min_27:if_14:mux_0",
      "name": "selectionsort_37:min_27:if_14:falsePath→selectionsort_37:min_27:if_14:mux_0:input2",
      "value": {
        "outPort": "falsePath",
        "inPort": "input2"
      }
    },
    {
      "v": "selectionsort_37:min_27:if_14",
      "w": "selectionsort_37:min_27:if_14:mux_0",
      "name": "selectionsort_37:min_27:if_14:check→selectionsort_37:min_27:if_14:mux_0:control",
      "value": {
        "outPort": "check",
        "inPort": "control"
      }
    },
    {
      "v": "selectionsort_37:min_27:if_14:mux_0",
      "w": "selectionsort_37:min_27:if_14",
      "name": "selectionsort_37:min_27:if_14:mux_0:output→selectionsort_37:min_27:if_14:value",
      "value": {
        "outPort": "output",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:min_27:if_17",
      "w": "selectionsort_37:min_27:if_17:mux_0",
      "name": "selectionsort_37:min_27:if_17:truePath→selectionsort_37:min_27:if_17:mux_0:input1",
      "value": {
        "outPort": "truePath",
        "inPort": "input1"
      }
    },
    {
      "v": "selectionsort_37:min_27:if_17",
      "w": "selectionsort_37:min_27:if_17:mux_0",
      "name": "selectionsort_37:min_27:if_17:falsePath→selectionsort_37:min_27:if_17:mux_0:input2",
      "value": {
        "outPort": "falsePath",
        "inPort": "input2"
      }
    },
    {
      "v": "selectionsort_37:min_27:if_17",
      "w": "selectionsort_37:min_27:if_17:mux_0",
      "name": "selectionsort_37:min_27:if_17:check→selectionsort_37:min_27:if_17:mux_0:control",
      "value": {
        "outPort": "check",
        "inPort": "control"
      }
    },
    {
      "v": "selectionsort_37:min_27:if_17:mux_0",
      "w": "selectionsort_37:min_27:if_17",
      "name": "selectionsort_37:min_27:if_17:mux_0:output→selectionsort_37:min_27:if_17:value",
      "value": {
        "outPort": "output",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30",
      "w": "selectionsort_37:filter_30:fold_7",
      "name": "selectionsort_37:filter_30:list→selectionsort_37:filter_30:fold_7:list",
      "value": {
        "outPort": "list",
        "inPort": "list"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9",
      "w": "selectionsort_37:filter_30:partial_8",
      "name": "selectionsort_37:filter_30:lambda_9:fn→selectionsort_37:filter_30:partial_8:fn",
      "value": {
        "outPort": "fn",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30",
      "w": "selectionsort_37:filter_30:partial_8",
      "name": "selectionsort_37:filter_30:fn→selectionsort_37:filter_30:partial_8:value",
      "value": {
        "outPort": "fn",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:partial_8",
      "w": "selectionsort_37:filter_30:fold_7",
      "name": "selectionsort_37:filter_30:partial_8:result→selectionsort_37:filter_30:fold_7:fn",
      "value": {
        "outPort": "result",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30:array/emptyArray_13",
      "w": "selectionsort_37:filter_30:fold_7",
      "name": "selectionsort_37:filter_30:array/emptyArray_13:output→selectionsort_37:filter_30:fold_7:init",
      "value": {
        "outPort": "output",
        "inPort": "init"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7",
      "w": "selectionsort_37:filter_30",
      "name": "selectionsort_37:filter_30:fold_7:value→selectionsort_37:filter_30:value",
      "value": {
        "outPort": "value",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7",
      "w": "selectionsort_37:filter_30:fold_7:empty_1",
      "name": "selectionsort_37:filter_30:fold_7:list→selectionsort_37:filter_30:fold_7:empty_1:array",
      "value": {
        "outPort": "list",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:empty_1",
      "w": "selectionsort_37:filter_30:fold_7:if_0",
      "name": "selectionsort_37:filter_30:fold_7:empty_1:isEmpty→selectionsort_37:filter_30:fold_7:if_0:check",
      "value": {
        "outPort": "isEmpty",
        "inPort": "check"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7",
      "w": "selectionsort_37:filter_30:fold_7:if_0",
      "name": "selectionsort_37:filter_30:fold_7:init→selectionsort_37:filter_30:fold_7:if_0:truePath",
      "value": {
        "outPort": "init",
        "inPort": "truePath"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7",
      "w": "selectionsort_37:filter_30:fold_7:partial_3",
      "name": "selectionsort_37:filter_30:fold_7:fn→selectionsort_37:filter_30:fold_7:partial_3:fn",
      "value": {
        "outPort": "fn",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7",
      "w": "selectionsort_37:filter_30:fold_7:first_4",
      "name": "selectionsort_37:filter_30:fold_7:list→selectionsort_37:filter_30:fold_7:first_4:array",
      "value": {
        "outPort": "list",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:first_4",
      "w": "selectionsort_37:filter_30:fold_7:partial_3",
      "name": "selectionsort_37:filter_30:fold_7:first_4:value→selectionsort_37:filter_30:fold_7:partial_3:value",
      "value": {
        "outPort": "value",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:partial_3",
      "w": "selectionsort_37:filter_30:fold_7:apply_2",
      "name": "selectionsort_37:filter_30:fold_7:partial_3:result→selectionsort_37:filter_30:fold_7:apply_2:fn",
      "value": {
        "outPort": "result",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7",
      "w": "selectionsort_37:filter_30:fold_7:rest_6",
      "name": "selectionsort_37:filter_30:fold_7:list→selectionsort_37:filter_30:fold_7:rest_6:array",
      "value": {
        "outPort": "list",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:rest_6",
      "w": "selectionsort_37:filter_30:fold_7:fold_5",
      "name": "selectionsort_37:filter_30:fold_7:rest_6:rest→selectionsort_37:filter_30:fold_7:fold_5:list",
      "value": {
        "outPort": "rest",
        "inPort": "list"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7",
      "w": "selectionsort_37:filter_30:fold_7:fold_5",
      "name": "selectionsort_37:filter_30:fold_7:fn→selectionsort_37:filter_30:fold_7:fold_5:fn",
      "value": {
        "outPort": "fn",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7",
      "w": "selectionsort_37:filter_30:fold_7:fold_5",
      "name": "selectionsort_37:filter_30:fold_7:init→selectionsort_37:filter_30:fold_7:fold_5:init",
      "value": {
        "outPort": "init",
        "inPort": "init"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:fold_5",
      "w": "selectionsort_37:filter_30:fold_7:apply_2",
      "name": "selectionsort_37:filter_30:fold_7:fold_5:value→selectionsort_37:filter_30:fold_7:apply_2:value",
      "value": {
        "outPort": "value",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:apply_2",
      "w": "selectionsort_37:filter_30:fold_7:if_0",
      "name": "selectionsort_37:filter_30:fold_7:apply_2:result→selectionsort_37:filter_30:fold_7:if_0:falsePath",
      "value": {
        "outPort": "result",
        "inPort": "falsePath"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:if_0",
      "w": "selectionsort_37:filter_30:fold_7",
      "name": "selectionsort_37:filter_30:fold_7:if_0:value→selectionsort_37:filter_30:fold_7:value",
      "value": {
        "outPort": "value",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:if_0",
      "w": "selectionsort_37:filter_30:fold_7:if_0:mux_0",
      "name": "selectionsort_37:filter_30:fold_7:if_0:truePath→selectionsort_37:filter_30:fold_7:if_0:mux_0:input1",
      "value": {
        "outPort": "truePath",
        "inPort": "input1"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:if_0",
      "w": "selectionsort_37:filter_30:fold_7:if_0:mux_0",
      "name": "selectionsort_37:filter_30:fold_7:if_0:falsePath→selectionsort_37:filter_30:fold_7:if_0:mux_0:input2",
      "value": {
        "outPort": "falsePath",
        "inPort": "input2"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:if_0",
      "w": "selectionsort_37:filter_30:fold_7:if_0:mux_0",
      "name": "selectionsort_37:filter_30:fold_7:if_0:check→selectionsort_37:filter_30:fold_7:if_0:mux_0:control",
      "value": {
        "outPort": "check",
        "inPort": "control"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:if_0:mux_0",
      "w": "selectionsort_37:filter_30:fold_7:if_0",
      "name": "selectionsort_37:filter_30:fold_7:if_0:mux_0:output→selectionsort_37:filter_30:fold_7:if_0:value",
      "value": {
        "outPort": "output",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:apply_2",
      "w": "selectionsort_37:filter_30:fold_7:apply_2:partial_1",
      "name": "selectionsort_37:filter_30:fold_7:apply_2:fn→selectionsort_37:filter_30:fold_7:apply_2:partial_1:fn",
      "value": {
        "outPort": "fn",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:apply_2",
      "w": "selectionsort_37:filter_30:fold_7:apply_2:partial_1",
      "name": "selectionsort_37:filter_30:fold_7:apply_2:value→selectionsort_37:filter_30:fold_7:apply_2:partial_1:value",
      "value": {
        "outPort": "value",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:apply_2:partial_1",
      "w": "selectionsort_37:filter_30:fold_7:apply_2:call_0",
      "name": "selectionsort_37:filter_30:fold_7:apply_2:partial_1:result→selectionsort_37:filter_30:fold_7:apply_2:call_0:fn",
      "value": {
        "outPort": "result",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30:fold_7:apply_2:call_0",
      "w": "selectionsort_37:filter_30:fold_7:apply_2",
      "name": "selectionsort_37:filter_30:fold_7:apply_2:call_0:result→selectionsort_37:filter_30:fold_7:apply_2:result",
      "value": {
        "outPort": "result",
        "inPort": "result"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:fn→selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:fn",
      "value": {
        "outPort": "fn",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:cur→selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:value",
      "value": {
        "outPort": "cur",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:result→selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:check",
      "value": {
        "outPort": "result",
        "inPort": "check"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:acc→selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12:array",
      "value": {
        "outPort": "acc",
        "inPort": "array"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:cur→selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12:value",
      "value": {
        "outPort": "cur",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:prepend_12:result→selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:truePath",
      "value": {
        "outPort": "result",
        "inPort": "truePath"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:acc→selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:falsePath",
      "value": {
        "outPort": "acc",
        "inPort": "falsePath"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:value→selectionsort_37:filter_30:lambda_9:lambda_9_impl:value_0",
      "value": {
        "outPort": "value",
        "inPort": "value_0"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:truePath→selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0:input1",
      "value": {
        "outPort": "truePath",
        "inPort": "input1"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:falsePath→selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0:input2",
      "value": {
        "outPort": "falsePath",
        "inPort": "input2"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:check→selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0:control",
      "value": {
        "outPort": "check",
        "inPort": "control"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:mux_0:output→selectionsort_37:filter_30:lambda_9:lambda_9_impl:if_10:value",
      "value": {
        "outPort": "output",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:fn→selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1:fn",
      "value": {
        "outPort": "fn",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:value→selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1:value",
      "value": {
        "outPort": "value",
        "inPort": "value"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:partial_1:result→selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0:fn",
      "value": {
        "outPort": "result",
        "inPort": "fn"
      }
    },
    {
      "v": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0",
      "w": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11",
      "name": "selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:call_0:result→selectionsort_37:filter_30:lambda_9:lambda_9_impl:apply_11:result",
      "value": {
        "outPort": "result",
        "inPort": "result"
      }
    },
    {
      "v": "selectionsort_37:lambda_32:lambda_32_impl",
      "w": "selectionsort_37:lambda_32:lambda_32_impl:equal_34",
      "name": "selectionsort_37:lambda_32:lambda_32_impl:x→selectionsort_37:lambda_32:lambda_32_impl:equal_34:i1",
      "value": {
        "outPort": "x",
        "inPort": "i1"
      }
    },
    {
      "v": "selectionsort_37:lambda_32:lambda_32_impl",
      "w": "selectionsort_37:lambda_32:lambda_32_impl:equal_34",
      "name": "selectionsort_37:lambda_32:lambda_32_impl:y→selectionsort_37:lambda_32:lambda_32_impl:equal_34:i2",
      "value": {
        "outPort": "y",
        "inPort": "i2"
      }
    },
    {
      "v": "selectionsort_37:lambda_32:lambda_32_impl:equal_34",
      "w": "selectionsort_37:lambda_32:lambda_32_impl:not_33",
      "name": "selectionsort_37:lambda_32:lambda_32_impl:equal_34:eq→selectionsort_37:lambda_32:lambda_32_impl:not_33:input",
      "value": {
        "outPort": "eq",
        "inPort": "input"
      }
    },
    {
      "v": "selectionsort_37:lambda_32:lambda_32_impl:not_33",
      "w": "selectionsort_37:lambda_32:lambda_32_impl",
      "name": "selectionsort_37:lambda_32:lambda_32_impl:not_33:output→selectionsort_37:lambda_32:lambda_32_impl:value_0",
      "value": {
        "outPort": "output",
        "inPort": "value_0"
      }
    }
  ]
}
