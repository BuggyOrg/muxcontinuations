{
  "options": {
    "directed": true,
    "multigraph": true,
    "compound": true
  },
  "nodes": [
    {
      "v": "stdout_18",
      "value": {
        "id": "io/stdout",
        "version": "0.3.0",
        "inputPorts": {
          "input": "string"
        },
        "outputPorts": {},
        "settings": {
          "sideEffects": true,
          "argumentOrdering": [
            "input"
          ]
        },
        "atomic": true,
        "isSink": true,
        "path": [],
        "branchPath": "stdout_18",
        "branch": "stdout_18",
        "name": "stdout_18",
        "recursive": false,
        "typeHint": {}
      }
    },
    {
      "v": "number_to_string_19",
      "value": {
        "id": "translator/number_to_string",
        "version": "0.2.0",
        "inputPorts": {
          "input": "int64"
        },
        "outputPorts": {
          "output": "string"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "input",
            "output"
          ]
        },
        "path": [],
        "branchPath": "number_to_string_19",
        "branch": "number_to_string_19",
        "name": "number_to_string_19",
        "recursive": false,
        "typeHint": {}
      }
    },
    {
      "v": "ack_20",
      "value": {
        "id": "ack",
        "inputPorts": {
          "m": "int64",
          "n": "int64"
        },
        "outputPorts": {
          "result": "int64"
        },
        "settings": {
          "argumentOrdering": [
            "m",
            "n",
            "result"
          ],
          "genericType": {
            "m": "int64",
            "result": "int64",
            "n": "int64"
          },
          "isGeneric": true
        },
        "implementation": {
          "nodes": [
            {
              "id": "logic/mux",
              "inputPorts": {
                "input1": "generic",
                "input2": "generic",
                "control": "bool"
              },
              "outputPorts": {
                "output": "generic"
              },
              "atomic": true,
              "version": "0.3.0",
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "input1",
                  "input2",
                  "control",
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:mux_0",
              "branch": "mux_0",
              "recursive": false
            },
            {
              "id": "math/add",
              "version": "0.3.0",
              "inputPorts": {
                "s1": "number",
                "s2": "number"
              },
              "outputPorts": {
                "sum": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "s1",
                  "s2",
                  "sum"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:add_1",
              "branch": "add_1",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.3.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "params": {
                "value": 1
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(1)_2",
              "branch": "const(1)_2",
              "recursive": false
            },
            {
              "id": "logic/mux",
              "inputPorts": {
                "input1": "generic",
                "input2": "generic",
                "control": "bool"
              },
              "outputPorts": {
                "output": "generic"
              },
              "atomic": true,
              "version": "0.3.0",
              "specialForm": true,
              "settings": {
                "argumentOrdering": [
                  "input1",
                  "input2",
                  "control",
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:mux_3",
              "branch": "mux_3",
              "recursive": false
            },
            {
              "id": "ack",
              "inputPorts": {
                "m": "generic",
                "n": "generic"
              },
              "outputPorts": {
                "result": "generic"
              },
              "settings": {
                "argumentOrdering": [
                  "m",
                  "n",
                  "result"
                ]
              },
              "implementation": {
                "nodes": [
                  {
                    "meta": "logic/mux",
                    "name": "mux_0"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_1"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_2",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "logic/mux",
                    "name": "mux_3"
                  },
                  {
                    "meta": "ack",
                    "name": "ack_4"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_5"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_6",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_7",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_8"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_9"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_10",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_11"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_12"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_13",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_14"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_15",
                    "params": {
                      "value": 0
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_16"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_17",
                    "params": {
                      "value": 0
                    }
                  }
                ],
                "edges": [
                  {
                    "from": "n",
                    "to": "add_1:s1"
                  },
                  {
                    "from": "const(1)_2:output",
                    "to": "add_1:s2"
                  },
                  {
                    "from": "add_1:sum",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_5:s1"
                  },
                  {
                    "from": "const(-1)_6:output",
                    "to": "add_5:s2"
                  },
                  {
                    "from": "add_5:sum",
                    "to": "ack_4:m"
                  },
                  {
                    "from": "const(1)_7:output",
                    "to": "ack_4:n"
                  },
                  {
                    "from": "ack_4:result",
                    "to": "mux_3:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_9:s1"
                  },
                  {
                    "from": "const(-1)_10:output",
                    "to": "add_9:s2"
                  },
                  {
                    "from": "add_9:sum",
                    "to": "ack_8:m"
                  },
                  {
                    "from": "m",
                    "to": "ack_11:m"
                  },
                  {
                    "from": "n",
                    "to": "add_12:s1"
                  },
                  {
                    "from": "const(-1)_13:output",
                    "to": "add_12:s2"
                  },
                  {
                    "from": "add_12:sum",
                    "to": "ack_11:n"
                  },
                  {
                    "from": "ack_11:result",
                    "to": "ack_8:n"
                  },
                  {
                    "from": "ack_8:result",
                    "to": "mux_3:input2"
                  },
                  {
                    "from": "n",
                    "to": "equal_14:i1"
                  },
                  {
                    "from": "const(0)_15:output",
                    "to": "equal_14:i2"
                  },
                  {
                    "from": "equal_14:eq",
                    "to": "mux_3:control"
                  },
                  {
                    "from": "mux_3:output",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "m",
                    "to": "equal_16:i1"
                  },
                  {
                    "from": "const(0)_17:output",
                    "to": "equal_16:i2"
                  },
                  {
                    "from": "equal_16:eq",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "result"
                  }
                ]
              },
              "name": "ack_20",
              "externalComponent": true,
              "parent": "ack_20",
              "branchPath": "ack_20:ack_4",
              "branch": "ack_4",
              "recursesTo": {
                "meta": "ack",
                "branch": "ack_20",
                "path": [],
                "branchPath": "ack_20"
              },
              "recursive": true
            },
            {
              "id": "math/add",
              "version": "0.3.0",
              "inputPorts": {
                "s1": "number",
                "s2": "number"
              },
              "outputPorts": {
                "sum": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "s1",
                  "s2",
                  "sum"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:add_5",
              "branch": "add_5",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.3.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "params": {
                "value": -1
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(-1)_6",
              "branch": "const(-1)_6",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.3.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "params": {
                "value": 1
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(1)_7",
              "branch": "const(1)_7",
              "recursive": false
            },
            {
              "id": "ack",
              "inputPorts": {
                "m": "generic",
                "n": "generic"
              },
              "outputPorts": {
                "result": "generic"
              },
              "settings": {
                "argumentOrdering": [
                  "m",
                  "n",
                  "result"
                ]
              },
              "implementation": {
                "nodes": [
                  {
                    "meta": "logic/mux",
                    "name": "mux_0"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_1"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_2",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "logic/mux",
                    "name": "mux_3"
                  },
                  {
                    "meta": "ack",
                    "name": "ack_4"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_5"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_6",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_7",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_8"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_9"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_10",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_11"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_12"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_13",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_14"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_15",
                    "params": {
                      "value": 0
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_16"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_17",
                    "params": {
                      "value": 0
                    }
                  }
                ],
                "edges": [
                  {
                    "from": "n",
                    "to": "add_1:s1"
                  },
                  {
                    "from": "const(1)_2:output",
                    "to": "add_1:s2"
                  },
                  {
                    "from": "add_1:sum",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_5:s1"
                  },
                  {
                    "from": "const(-1)_6:output",
                    "to": "add_5:s2"
                  },
                  {
                    "from": "add_5:sum",
                    "to": "ack_4:m"
                  },
                  {
                    "from": "const(1)_7:output",
                    "to": "ack_4:n"
                  },
                  {
                    "from": "ack_4:result",
                    "to": "mux_3:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_9:s1"
                  },
                  {
                    "from": "const(-1)_10:output",
                    "to": "add_9:s2"
                  },
                  {
                    "from": "add_9:sum",
                    "to": "ack_8:m"
                  },
                  {
                    "from": "m",
                    "to": "ack_11:m"
                  },
                  {
                    "from": "n",
                    "to": "add_12:s1"
                  },
                  {
                    "from": "const(-1)_13:output",
                    "to": "add_12:s2"
                  },
                  {
                    "from": "add_12:sum",
                    "to": "ack_11:n"
                  },
                  {
                    "from": "ack_11:result",
                    "to": "ack_8:n"
                  },
                  {
                    "from": "ack_8:result",
                    "to": "mux_3:input2"
                  },
                  {
                    "from": "n",
                    "to": "equal_14:i1"
                  },
                  {
                    "from": "const(0)_15:output",
                    "to": "equal_14:i2"
                  },
                  {
                    "from": "equal_14:eq",
                    "to": "mux_3:control"
                  },
                  {
                    "from": "mux_3:output",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "m",
                    "to": "equal_16:i1"
                  },
                  {
                    "from": "const(0)_17:output",
                    "to": "equal_16:i2"
                  },
                  {
                    "from": "equal_16:eq",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "result"
                  }
                ]
              },
              "name": "ack_20",
              "externalComponent": true,
              "parent": "ack_20",
              "branchPath": "ack_20:ack_8",
              "branch": "ack_8",
              "recursesTo": {
                "meta": "ack",
                "branch": "ack_20",
                "path": [],
                "branchPath": "ack_20"
              },
              "recursive": true
            },
            {
              "id": "math/add",
              "version": "0.3.0",
              "inputPorts": {
                "s1": "number",
                "s2": "number"
              },
              "outputPorts": {
                "sum": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "s1",
                  "s2",
                  "sum"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:add_9",
              "branch": "add_9",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.3.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "params": {
                "value": -1
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(-1)_10",
              "branch": "const(-1)_10",
              "recursive": false
            },
            {
              "id": "ack",
              "inputPorts": {
                "m": "generic",
                "n": "generic"
              },
              "outputPorts": {
                "result": "generic"
              },
              "settings": {
                "argumentOrdering": [
                  "m",
                  "n",
                  "result"
                ]
              },
              "implementation": {
                "nodes": [
                  {
                    "meta": "logic/mux",
                    "name": "mux_0"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_1"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_2",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "logic/mux",
                    "name": "mux_3"
                  },
                  {
                    "meta": "ack",
                    "name": "ack_4"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_5"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_6",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "math/const",
                    "name": "const(1)_7",
                    "params": {
                      "value": 1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_8"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_9"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_10",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "ack",
                    "name": "ack_11"
                  },
                  {
                    "meta": "math/add",
                    "name": "add_12"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(-1)_13",
                    "params": {
                      "value": -1
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_14"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_15",
                    "params": {
                      "value": 0
                    }
                  },
                  {
                    "meta": "logic/equal",
                    "name": "equal_16"
                  },
                  {
                    "meta": "math/const",
                    "name": "const(0)_17",
                    "params": {
                      "value": 0
                    }
                  }
                ],
                "edges": [
                  {
                    "from": "n",
                    "to": "add_1:s1"
                  },
                  {
                    "from": "const(1)_2:output",
                    "to": "add_1:s2"
                  },
                  {
                    "from": "add_1:sum",
                    "to": "mux_0:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_5:s1"
                  },
                  {
                    "from": "const(-1)_6:output",
                    "to": "add_5:s2"
                  },
                  {
                    "from": "add_5:sum",
                    "to": "ack_4:m"
                  },
                  {
                    "from": "const(1)_7:output",
                    "to": "ack_4:n"
                  },
                  {
                    "from": "ack_4:result",
                    "to": "mux_3:input1"
                  },
                  {
                    "from": "m",
                    "to": "add_9:s1"
                  },
                  {
                    "from": "const(-1)_10:output",
                    "to": "add_9:s2"
                  },
                  {
                    "from": "add_9:sum",
                    "to": "ack_8:m"
                  },
                  {
                    "from": "m",
                    "to": "ack_11:m"
                  },
                  {
                    "from": "n",
                    "to": "add_12:s1"
                  },
                  {
                    "from": "const(-1)_13:output",
                    "to": "add_12:s2"
                  },
                  {
                    "from": "add_12:sum",
                    "to": "ack_11:n"
                  },
                  {
                    "from": "ack_11:result",
                    "to": "ack_8:n"
                  },
                  {
                    "from": "ack_8:result",
                    "to": "mux_3:input2"
                  },
                  {
                    "from": "n",
                    "to": "equal_14:i1"
                  },
                  {
                    "from": "const(0)_15:output",
                    "to": "equal_14:i2"
                  },
                  {
                    "from": "equal_14:eq",
                    "to": "mux_3:control"
                  },
                  {
                    "from": "mux_3:output",
                    "to": "mux_0:input2"
                  },
                  {
                    "from": "m",
                    "to": "equal_16:i1"
                  },
                  {
                    "from": "const(0)_17:output",
                    "to": "equal_16:i2"
                  },
                  {
                    "from": "equal_16:eq",
                    "to": "mux_0:control"
                  },
                  {
                    "from": "mux_0:output",
                    "to": "result"
                  }
                ]
              },
              "name": "ack_20",
              "externalComponent": true,
              "parent": "ack_20",
              "branchPath": "ack_20:ack_11",
              "branch": "ack_11",
              "recursesTo": {
                "meta": "ack",
                "branch": "ack_20",
                "path": [],
                "branchPath": "ack_20"
              },
              "recursive": true
            },
            {
              "id": "math/add",
              "version": "0.3.0",
              "inputPorts": {
                "s1": "number",
                "s2": "number"
              },
              "outputPorts": {
                "sum": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "s1",
                  "s2",
                  "sum"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:add_12",
              "branch": "add_12",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.3.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "params": {
                "value": -1
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(-1)_13",
              "branch": "const(-1)_13",
              "recursive": false
            },
            {
              "name": "EQUAL",
              "id": "logic/equal",
              "inputPorts": {
                "i1": "generic",
                "i2": "generic"
              },
              "outputPorts": {
                "eq": "bool"
              },
              "atomic": true,
              "version": "0.2.0",
              "settings": {
                "argumentOrdering": [
                  "i1",
                  "i2",
                  "eq"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:equal_14",
              "branch": "equal_14",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.3.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "params": {
                "value": 0
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(0)_15",
              "branch": "const(0)_15",
              "recursive": false
            },
            {
              "name": "EQUAL",
              "id": "logic/equal",
              "inputPorts": {
                "i1": "generic",
                "i2": "generic"
              },
              "outputPorts": {
                "eq": "bool"
              },
              "atomic": true,
              "version": "0.2.0",
              "settings": {
                "argumentOrdering": [
                  "i1",
                  "i2",
                  "eq"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "parent": "ack_20",
              "branchPath": "ack_20:equal_16",
              "branch": "equal_16",
              "recursive": false
            },
            {
              "id": "math/const",
              "version": "0.3.0",
              "inputPorts": {},
              "outputPorts": {
                "output": "number"
              },
              "atomic": true,
              "settings": {
                "argumentOrdering": [
                  "output"
                ]
              },
              "path": [
                {
                  "meta": "ack",
                  "branch": "ack_20",
                  "branchPath": "ack_20"
                }
              ],
              "params": {
                "value": 0
              },
              "parent": "ack_20",
              "branchPath": "ack_20:const(0)_17",
              "branch": "const(0)_17",
              "recursive": false
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "add_1:s1"
            },
            {
              "from": "const(1)_2:output",
              "to": "add_1:s2"
            },
            {
              "from": "add_1:sum",
              "to": "mux_0:input1"
            },
            {
              "from": "m",
              "to": "add_5:s1"
            },
            {
              "from": "const(-1)_6:output",
              "to": "add_5:s2"
            },
            {
              "from": "add_5:sum",
              "to": "ack_4:m"
            },
            {
              "from": "const(1)_7:output",
              "to": "ack_4:n"
            },
            {
              "from": "ack_4:result",
              "to": "mux_3:input1"
            },
            {
              "from": "m",
              "to": "add_9:s1"
            },
            {
              "from": "const(-1)_10:output",
              "to": "add_9:s2"
            },
            {
              "from": "add_9:sum",
              "to": "ack_8:m"
            },
            {
              "from": "m",
              "to": "ack_11:m"
            },
            {
              "from": "n",
              "to": "add_12:s1"
            },
            {
              "from": "const(-1)_13:output",
              "to": "add_12:s2"
            },
            {
              "from": "add_12:sum",
              "to": "ack_11:n"
            },
            {
              "from": "ack_11:result",
              "to": "ack_8:n"
            },
            {
              "from": "ack_8:result",
              "to": "mux_3:input2"
            },
            {
              "from": "n",
              "to": "equal_14:i1"
            },
            {
              "from": "const(0)_15:output",
              "to": "equal_14:i2"
            },
            {
              "from": "equal_14:eq",
              "to": "mux_3:control"
            },
            {
              "from": "mux_3:output",
              "to": "mux_0:input2"
            },
            {
              "from": "m",
              "to": "equal_16:i1"
            },
            {
              "from": "const(0)_17:output",
              "to": "equal_16:i2"
            },
            {
              "from": "equal_16:eq",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "result"
            }
          ]
        },
        "name": "ack_20",
        "externalComponent": true,
        "path": [],
        "branchPath": "ack_20",
        "branch": "ack_20",
        "recursive": false,
        "recursiveRoot": true,
        "typeHint": {}
      }
    },
    {
      "v": "ack_20:mux_0",
      "value": {
        "id": "logic/mux",
        "inputPorts": {
          "input1": "int64",
          "input2": "int64",
          "control": "bool"
        },
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "version": "0.3.0",
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "input1",
            "input2",
            "control",
            "output"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:mux_0",
        "branch": "mux_0",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_1",
      "value": {
        "id": "math/add",
        "version": "0.3.0",
        "inputPorts": {
          "s1": "int64",
          "s2": "int64"
        },
        "outputPorts": {
          "sum": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "s1",
            "s2",
            "sum"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:add_1",
        "branch": "add_1",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(1)_2",
      "value": {
        "id": "math/const",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "output"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "params": {
          "value": 1
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(1)_2",
        "branch": "const(1)_2",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:mux_3",
      "value": {
        "id": "logic/mux",
        "inputPorts": {
          "input1": "int64",
          "input2": "int64",
          "control": "bool"
        },
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "version": "0.3.0",
        "specialForm": true,
        "settings": {
          "argumentOrdering": [
            "input1",
            "input2",
            "control",
            "output"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:mux_3",
        "branch": "mux_3",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_4",
      "value": {
        "id": "ack",
        "inputPorts": {
          "m": "int64",
          "n": "int64"
        },
        "outputPorts": {
          "result": "int64"
        },
        "settings": {
          "argumentOrdering": [
            "m",
            "n",
            "result"
          ]
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/mux",
              "name": "mux_0"
            },
            {
              "meta": "math/add",
              "name": "add_1"
            },
            {
              "meta": "math/const",
              "name": "const(1)_2",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "logic/mux",
              "name": "mux_3"
            },
            {
              "meta": "ack",
              "name": "ack_4"
            },
            {
              "meta": "math/add",
              "name": "add_5"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_6",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "math/const",
              "name": "const(1)_7",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "ack",
              "name": "ack_8"
            },
            {
              "meta": "math/add",
              "name": "add_9"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_10",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "ack",
              "name": "ack_11"
            },
            {
              "meta": "math/add",
              "name": "add_12"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_13",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_14"
            },
            {
              "meta": "math/const",
              "name": "const(0)_15",
              "params": {
                "value": 0
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_16"
            },
            {
              "meta": "math/const",
              "name": "const(0)_17",
              "params": {
                "value": 0
              }
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "add_1:s1"
            },
            {
              "from": "const(1)_2:output",
              "to": "add_1:s2"
            },
            {
              "from": "add_1:sum",
              "to": "mux_0:input1"
            },
            {
              "from": "m",
              "to": "add_5:s1"
            },
            {
              "from": "const(-1)_6:output",
              "to": "add_5:s2"
            },
            {
              "from": "add_5:sum",
              "to": "ack_4:m"
            },
            {
              "from": "const(1)_7:output",
              "to": "ack_4:n"
            },
            {
              "from": "ack_4:result",
              "to": "mux_3:input1"
            },
            {
              "from": "m",
              "to": "add_9:s1"
            },
            {
              "from": "const(-1)_10:output",
              "to": "add_9:s2"
            },
            {
              "from": "add_9:sum",
              "to": "ack_8:m"
            },
            {
              "from": "m",
              "to": "ack_11:m"
            },
            {
              "from": "n",
              "to": "add_12:s1"
            },
            {
              "from": "const(-1)_13:output",
              "to": "add_12:s2"
            },
            {
              "from": "add_12:sum",
              "to": "ack_11:n"
            },
            {
              "from": "ack_11:result",
              "to": "ack_8:n"
            },
            {
              "from": "ack_8:result",
              "to": "mux_3:input2"
            },
            {
              "from": "n",
              "to": "equal_14:i1"
            },
            {
              "from": "const(0)_15:output",
              "to": "equal_14:i2"
            },
            {
              "from": "equal_14:eq",
              "to": "mux_3:control"
            },
            {
              "from": "mux_3:output",
              "to": "mux_0:input2"
            },
            {
              "from": "m",
              "to": "equal_16:i1"
            },
            {
              "from": "const(0)_17:output",
              "to": "equal_16:i2"
            },
            {
              "from": "equal_16:eq",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "result"
            }
          ]
        },
        "name": "ack_20",
        "externalComponent": true,
        "parent": "ack_20",
        "branchPath": "ack_20:ack_4",
        "branch": "ack_4",
        "recursesTo": {
          "meta": "ack",
          "branch": "ack_20",
          "path": [],
          "branchPath": "ack_20"
        },
        "recursive": true,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_5",
      "value": {
        "id": "math/add",
        "version": "0.3.0",
        "inputPorts": {
          "s1": "int64",
          "s2": "int64"
        },
        "outputPorts": {
          "sum": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "s1",
            "s2",
            "sum"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:add_5",
        "branch": "add_5",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(-1)_6",
      "value": {
        "id": "math/const",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "output"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "params": {
          "value": -1
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(-1)_6",
        "branch": "const(-1)_6",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(1)_7",
      "value": {
        "id": "math/const",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "output"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "params": {
          "value": 1
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(1)_7",
        "branch": "const(1)_7",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_8",
      "value": {
        "id": "ack",
        "inputPorts": {
          "m": "int64",
          "n": "int64"
        },
        "outputPorts": {
          "result": "int64"
        },
        "settings": {
          "argumentOrdering": [
            "m",
            "n",
            "result"
          ]
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/mux",
              "name": "mux_0"
            },
            {
              "meta": "math/add",
              "name": "add_1"
            },
            {
              "meta": "math/const",
              "name": "const(1)_2",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "logic/mux",
              "name": "mux_3"
            },
            {
              "meta": "ack",
              "name": "ack_4"
            },
            {
              "meta": "math/add",
              "name": "add_5"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_6",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "math/const",
              "name": "const(1)_7",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "ack",
              "name": "ack_8"
            },
            {
              "meta": "math/add",
              "name": "add_9"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_10",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "ack",
              "name": "ack_11"
            },
            {
              "meta": "math/add",
              "name": "add_12"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_13",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_14"
            },
            {
              "meta": "math/const",
              "name": "const(0)_15",
              "params": {
                "value": 0
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_16"
            },
            {
              "meta": "math/const",
              "name": "const(0)_17",
              "params": {
                "value": 0
              }
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "add_1:s1"
            },
            {
              "from": "const(1)_2:output",
              "to": "add_1:s2"
            },
            {
              "from": "add_1:sum",
              "to": "mux_0:input1"
            },
            {
              "from": "m",
              "to": "add_5:s1"
            },
            {
              "from": "const(-1)_6:output",
              "to": "add_5:s2"
            },
            {
              "from": "add_5:sum",
              "to": "ack_4:m"
            },
            {
              "from": "const(1)_7:output",
              "to": "ack_4:n"
            },
            {
              "from": "ack_4:result",
              "to": "mux_3:input1"
            },
            {
              "from": "m",
              "to": "add_9:s1"
            },
            {
              "from": "const(-1)_10:output",
              "to": "add_9:s2"
            },
            {
              "from": "add_9:sum",
              "to": "ack_8:m"
            },
            {
              "from": "m",
              "to": "ack_11:m"
            },
            {
              "from": "n",
              "to": "add_12:s1"
            },
            {
              "from": "const(-1)_13:output",
              "to": "add_12:s2"
            },
            {
              "from": "add_12:sum",
              "to": "ack_11:n"
            },
            {
              "from": "ack_11:result",
              "to": "ack_8:n"
            },
            {
              "from": "ack_8:result",
              "to": "mux_3:input2"
            },
            {
              "from": "n",
              "to": "equal_14:i1"
            },
            {
              "from": "const(0)_15:output",
              "to": "equal_14:i2"
            },
            {
              "from": "equal_14:eq",
              "to": "mux_3:control"
            },
            {
              "from": "mux_3:output",
              "to": "mux_0:input2"
            },
            {
              "from": "m",
              "to": "equal_16:i1"
            },
            {
              "from": "const(0)_17:output",
              "to": "equal_16:i2"
            },
            {
              "from": "equal_16:eq",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "result"
            }
          ]
        },
        "name": "ack_20",
        "externalComponent": true,
        "parent": "ack_20",
        "branchPath": "ack_20:ack_8",
        "branch": "ack_8",
        "recursesTo": {
          "meta": "ack",
          "branch": "ack_20",
          "path": [],
          "branchPath": "ack_20"
        },
        "recursive": true,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_9",
      "value": {
        "id": "math/add",
        "version": "0.3.0",
        "inputPorts": {
          "s1": "int64",
          "s2": "int64"
        },
        "outputPorts": {
          "sum": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "s1",
            "s2",
            "sum"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:add_9",
        "branch": "add_9",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(-1)_10",
      "value": {
        "id": "math/const",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "output"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "params": {
          "value": -1
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(-1)_10",
        "branch": "const(-1)_10",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:ack_11",
      "value": {
        "id": "ack",
        "inputPorts": {
          "m": "int64",
          "n": "int64"
        },
        "outputPorts": {
          "result": "int64"
        },
        "settings": {
          "argumentOrdering": [
            "m",
            "n",
            "result"
          ],
          "genericType": {
            "result": "int64"
          },
          "isGeneric": true
        },
        "implementation": {
          "nodes": [
            {
              "meta": "logic/mux",
              "name": "mux_0"
            },
            {
              "meta": "math/add",
              "name": "add_1"
            },
            {
              "meta": "math/const",
              "name": "const(1)_2",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "logic/mux",
              "name": "mux_3"
            },
            {
              "meta": "ack",
              "name": "ack_4"
            },
            {
              "meta": "math/add",
              "name": "add_5"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_6",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "math/const",
              "name": "const(1)_7",
              "params": {
                "value": 1
              }
            },
            {
              "meta": "ack",
              "name": "ack_8"
            },
            {
              "meta": "math/add",
              "name": "add_9"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_10",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "ack",
              "name": "ack_11"
            },
            {
              "meta": "math/add",
              "name": "add_12"
            },
            {
              "meta": "math/const",
              "name": "const(-1)_13",
              "params": {
                "value": -1
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_14"
            },
            {
              "meta": "math/const",
              "name": "const(0)_15",
              "params": {
                "value": 0
              }
            },
            {
              "meta": "logic/equal",
              "name": "equal_16"
            },
            {
              "meta": "math/const",
              "name": "const(0)_17",
              "params": {
                "value": 0
              }
            }
          ],
          "edges": [
            {
              "from": "n",
              "to": "add_1:s1"
            },
            {
              "from": "const(1)_2:output",
              "to": "add_1:s2"
            },
            {
              "from": "add_1:sum",
              "to": "mux_0:input1"
            },
            {
              "from": "m",
              "to": "add_5:s1"
            },
            {
              "from": "const(-1)_6:output",
              "to": "add_5:s2"
            },
            {
              "from": "add_5:sum",
              "to": "ack_4:m"
            },
            {
              "from": "const(1)_7:output",
              "to": "ack_4:n"
            },
            {
              "from": "ack_4:result",
              "to": "mux_3:input1"
            },
            {
              "from": "m",
              "to": "add_9:s1"
            },
            {
              "from": "const(-1)_10:output",
              "to": "add_9:s2"
            },
            {
              "from": "add_9:sum",
              "to": "ack_8:m"
            },
            {
              "from": "m",
              "to": "ack_11:m"
            },
            {
              "from": "n",
              "to": "add_12:s1"
            },
            {
              "from": "const(-1)_13:output",
              "to": "add_12:s2"
            },
            {
              "from": "add_12:sum",
              "to": "ack_11:n"
            },
            {
              "from": "ack_11:result",
              "to": "ack_8:n"
            },
            {
              "from": "ack_8:result",
              "to": "mux_3:input2"
            },
            {
              "from": "n",
              "to": "equal_14:i1"
            },
            {
              "from": "const(0)_15:output",
              "to": "equal_14:i2"
            },
            {
              "from": "equal_14:eq",
              "to": "mux_3:control"
            },
            {
              "from": "mux_3:output",
              "to": "mux_0:input2"
            },
            {
              "from": "m",
              "to": "equal_16:i1"
            },
            {
              "from": "const(0)_17:output",
              "to": "equal_16:i2"
            },
            {
              "from": "equal_16:eq",
              "to": "mux_0:control"
            },
            {
              "from": "mux_0:output",
              "to": "result"
            }
          ]
        },
        "name": "ack_20",
        "externalComponent": true,
        "parent": "ack_20",
        "branchPath": "ack_20:ack_11",
        "branch": "ack_11",
        "recursesTo": {
          "meta": "ack",
          "branch": "ack_20",
          "path": [],
          "branchPath": "ack_20"
        },
        "recursive": true,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:add_12",
      "value": {
        "id": "math/add",
        "version": "0.3.0",
        "inputPorts": {
          "s1": "int64",
          "s2": "int64"
        },
        "outputPorts": {
          "sum": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "s1",
            "s2",
            "sum"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:add_12",
        "branch": "add_12",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(-1)_13",
      "value": {
        "id": "math/const",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "output"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "params": {
          "value": -1
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(-1)_13",
        "branch": "const(-1)_13",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:equal_14",
      "value": {
        "name": "EQUAL",
        "id": "logic/equal",
        "inputPorts": {
          "i1": "int64",
          "i2": "int64"
        },
        "outputPorts": {
          "eq": "bool"
        },
        "atomic": true,
        "version": "0.2.0",
        "settings": {
          "argumentOrdering": [
            "i1",
            "i2",
            "eq"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:equal_14",
        "branch": "equal_14",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(0)_15",
      "value": {
        "id": "math/const",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "output"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "params": {
          "value": 0
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(0)_15",
        "branch": "const(0)_15",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:equal_16",
      "value": {
        "name": "EQUAL",
        "id": "logic/equal",
        "inputPorts": {
          "i1": "int64",
          "i2": "int64"
        },
        "outputPorts": {
          "eq": "bool"
        },
        "atomic": true,
        "version": "0.2.0",
        "settings": {
          "argumentOrdering": [
            "i1",
            "i2",
            "eq"
          ],
          "genericType": "int64",
          "isGeneric": true
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "parent": "ack_20",
        "branchPath": "ack_20:equal_16",
        "branch": "equal_16",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "ack_20:const(0)_17",
      "value": {
        "id": "math/const",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "output"
          ]
        },
        "path": [
          {
            "meta": "ack",
            "branch": "ack_20",
            "branchPath": "ack_20"
          }
        ],
        "params": {
          "value": 0
        },
        "parent": "ack_20",
        "branchPath": "ack_20:const(0)_17",
        "branch": "const(0)_17",
        "recursive": false,
        "typeHint": {}
      },
      "parent": "ack_20"
    },
    {
      "v": "const(3)_21",
      "value": {
        "id": "math/const",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "output"
          ]
        },
        "path": [],
        "params": {
          "value": 3
        },
        "branchPath": "const(3)_21",
        "branch": "const(3)_21",
        "name": "const(3)_21",
        "recursive": false,
        "typeHint": {}
      }
    },
    {
      "v": "string_to_number_22",
      "value": {
        "id": "translator/string_to_number",
        "version": "0.2.0",
        "inputPorts": {
          "input": "string"
        },
        "outputPorts": {
          "output": "int64"
        },
        "atomic": true,
        "settings": {
          "argumentOrdering": [
            "input",
            "output"
          ]
        },
        "path": [],
        "branchPath": "string_to_number_22",
        "branch": "string_to_number_22",
        "name": "string_to_number_22",
        "recursive": false,
        "typeHint": {}
      }
    },
    {
      "v": "stdin_23",
      "value": {
        "id": "io/stdin",
        "version": "0.3.0",
        "inputPorts": {},
        "outputPorts": {
          "output": "string"
        },
        "settings": {
          "sideEffects": true,
          "argumentOrdering": [
            "output"
          ]
        },
        "atomic": true,
        "path": [],
        "branchPath": "stdin_23",
        "branch": "stdin_23",
        "name": "stdin_23",
        "recursive": false,
        "typeHint": {}
      }
    }
  ],
  "edges": [
    {
      "v": "const(3)_21",
      "w": "ack_20",
      "value": {
        "outPort": "output",
        "inPort": "m"
      }
    },
    {
      "v": "stdin_23",
      "w": "string_to_number_22",
      "value": {
        "outPort": "output",
        "inPort": "input"
      }
    },
    {
      "v": "string_to_number_22",
      "w": "ack_20",
      "value": {
        "outPort": "output",
        "inPort": "n"
      }
    },
    {
      "v": "ack_20",
      "w": "number_to_string_19",
      "value": {
        "outPort": "result",
        "inPort": "input"
      }
    },
    {
      "v": "number_to_string_19",
      "w": "stdout_18",
      "value": {
        "outPort": "output",
        "inPort": "input"
      }
    },
    {
      "v": "ack_20",
      "w": "ack_20:add_1",
      "name": "ack_20:n→ack_20:add_1:s1",
      "value": {
        "outPort": "n",
        "inPort": "s1"
      }
    },
    {
      "v": "ack_20:const(1)_2",
      "w": "ack_20:add_1",
      "name": "ack_20:const(1)_2:output→ack_20:add_1:s2",
      "value": {
        "outPort": "output",
        "inPort": "s2"
      }
    },
    {
      "v": "ack_20:add_1",
      "w": "ack_20:mux_0",
      "name": "ack_20:add_1:sum→ack_20:mux_0:input1",
      "value": {
        "outPort": "sum",
        "inPort": "input1"
      }
    },
    {
      "v": "ack_20",
      "w": "ack_20:add_5",
      "name": "ack_20:m→ack_20:add_5:s1",
      "value": {
        "outPort": "m",
        "inPort": "s1"
      }
    },
    {
      "v": "ack_20:const(-1)_6",
      "w": "ack_20:add_5",
      "name": "ack_20:const(-1)_6:output→ack_20:add_5:s2",
      "value": {
        "outPort": "output",
        "inPort": "s2"
      }
    },
    {
      "v": "ack_20:add_5",
      "w": "ack_20:ack_4",
      "name": "ack_20:add_5:sum→ack_20:ack_4:m",
      "value": {
        "outPort": "sum",
        "inPort": "m"
      }
    },
    {
      "v": "ack_20:const(1)_7",
      "w": "ack_20:ack_4",
      "name": "ack_20:const(1)_7:output→ack_20:ack_4:n",
      "value": {
        "outPort": "output",
        "inPort": "n"
      }
    },
    {
      "v": "ack_20:ack_4",
      "w": "ack_20:mux_3",
      "name": "ack_20:ack_4:result→ack_20:mux_3:input1",
      "value": {
        "outPort": "result",
        "inPort": "input1"
      }
    },
    {
      "v": "ack_20",
      "w": "ack_20:add_9",
      "name": "ack_20:m→ack_20:add_9:s1",
      "value": {
        "outPort": "m",
        "inPort": "s1"
      }
    },
    {
      "v": "ack_20:const(-1)_10",
      "w": "ack_20:add_9",
      "name": "ack_20:const(-1)_10:output→ack_20:add_9:s2",
      "value": {
        "outPort": "output",
        "inPort": "s2"
      }
    },
    {
      "v": "ack_20:add_9",
      "w": "ack_20:ack_8",
      "name": "ack_20:add_9:sum→ack_20:ack_8:m",
      "value": {
        "outPort": "sum",
        "inPort": "m"
      }
    },
    {
      "v": "ack_20",
      "w": "ack_20:ack_11",
      "name": "ack_20:m→ack_20:ack_11:m",
      "value": {
        "outPort": "m",
        "inPort": "m"
      }
    },
    {
      "v": "ack_20",
      "w": "ack_20:add_12",
      "name": "ack_20:n→ack_20:add_12:s1",
      "value": {
        "outPort": "n",
        "inPort": "s1"
      }
    },
    {
      "v": "ack_20:const(-1)_13",
      "w": "ack_20:add_12",
      "name": "ack_20:const(-1)_13:output→ack_20:add_12:s2",
      "value": {
        "outPort": "output",
        "inPort": "s2"
      }
    },
    {
      "v": "ack_20:add_12",
      "w": "ack_20:ack_11",
      "name": "ack_20:add_12:sum→ack_20:ack_11:n",
      "value": {
        "outPort": "sum",
        "inPort": "n"
      }
    },
    {
      "v": "ack_20:ack_11",
      "w": "ack_20:ack_8",
      "name": "ack_20:ack_11:result→ack_20:ack_8:n",
      "value": {
        "outPort": "result",
        "inPort": "n"
      }
    },
    {
      "v": "ack_20:ack_8",
      "w": "ack_20:mux_3",
      "name": "ack_20:ack_8:result→ack_20:mux_3:input2",
      "value": {
        "outPort": "result",
        "inPort": "input2"
      }
    },
    {
      "v": "ack_20",
      "w": "ack_20:equal_14",
      "name": "ack_20:n→ack_20:equal_14:i1",
      "value": {
        "outPort": "n",
        "inPort": "i1"
      }
    },
    {
      "v": "ack_20:const(0)_15",
      "w": "ack_20:equal_14",
      "name": "ack_20:const(0)_15:output→ack_20:equal_14:i2",
      "value": {
        "outPort": "output",
        "inPort": "i2"
      }
    },
    {
      "v": "ack_20:equal_14",
      "w": "ack_20:mux_3",
      "name": "ack_20:equal_14:eq→ack_20:mux_3:control",
      "value": {
        "outPort": "eq",
        "inPort": "control"
      }
    },
    {
      "v": "ack_20:mux_3",
      "w": "ack_20:mux_0",
      "name": "ack_20:mux_3:output→ack_20:mux_0:input2",
      "value": {
        "outPort": "output",
        "inPort": "input2"
      }
    },
    {
      "v": "ack_20",
      "w": "ack_20:equal_16",
      "name": "ack_20:m→ack_20:equal_16:i1",
      "value": {
        "outPort": "m",
        "inPort": "i1"
      }
    },
    {
      "v": "ack_20:const(0)_17",
      "w": "ack_20:equal_16",
      "name": "ack_20:const(0)_17:output→ack_20:equal_16:i2",
      "value": {
        "outPort": "output",
        "inPort": "i2"
      }
    },
    {
      "v": "ack_20:equal_16",
      "w": "ack_20:mux_0",
      "name": "ack_20:equal_16:eq→ack_20:mux_0:control",
      "value": {
        "outPort": "eq",
        "inPort": "control"
      }
    },
    {
      "v": "ack_20:mux_0",
      "w": "ack_20",
      "name": "ack_20:mux_0:output→ack_20:result",
      "value": {
        "outPort": "output",
        "inPort": "result"
      }
    }
  ]
}
